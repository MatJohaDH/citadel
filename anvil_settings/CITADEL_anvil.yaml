modules:
- {name: Disambiguator_package, code: "import anvil.server\nimport anvil.tables as\
    \ tables\nimport anvil.tables.query as q\nfrom anvil.tables import app_tables\n\
    # This is a package.\n# You can define variables and functions here, and use them\
    \ from any form. For example, in a top-level form:\n#\n#    from . import Package1\n\
    #\n#    Package1.say_hello()\n#\n\ndef row_selected_filter(row):\n  try:\n   \
    \ res = row['selected']\n    return res\n  except KeyError:\n    return False\n",
  is_package: true, id: C3PMBLEBVYSNJRLKTAPMFTKPRZ5QDNMI}
- {name: Export_package, code: "import anvil.server\nimport anvil.tables as tables\n\
    import anvil.tables.query as q\nfrom anvil.tables import app_tables\n# This is\
    \ a package.\n# You can define variables and functions here, and use them from\
    \ any form. For example, in a top-level form:\n#\n#    from . import Package1\n\
    #\n#    Package1.say_hello()\n#\n\ndef say_hello():\n  print(\"Hello, world\"\
    )\n", is_package: true, id: LHNKLD6HYH6B2PLNJFGY2HXCLTSKRVAX}
- {name: Adding, code: "import anvil.server\nimport anvil.tables as tables\nimport\
    \ anvil.tables.query as q\nfrom anvil.tables import app_tables\n# This is a package.\n\
    # You can define variables and functions here, and use them from any form. For\
    \ example, in a top-level form:\n#\n#    from . import Package1\n#\n#    Package1.say_hello()\n\
    #\n\ndef say_hello():\n  print(\"Hello, world\")\n", is_package: true, id: C7LZUKDVKKARWBPGSEHFXAHUMNW47IZU}
- {name: Browser_package, code: "import anvil.server\nimport anvil.tables as tables\n\
    import anvil.tables.query as q\nfrom anvil.tables import app_tables\nfrom anvil\
    \ import alert\n# This is a package.\n# You can define variables and functions\
    \ here, and use them from any form. For example, in a top-level form:\n#\n#  \
    \  from . import Package1\n#\n#    Package1.say_hello()\n#\n\ndef say_hello():\n\
    \  print(\"Hello, world\")\n\n\ndef update_sources():\n  \"\"\"\n  Fetches the\
    \ most recent data on sources from the db and stores it in tables.\n  \"\"\" \
    \ \n  tables.app_tables.sources.delete_all_rows()\n\n  for name, comment, year\
    \ in anvil.server.call('fetch_sources'):\n#     alert(name, title, year)\n   \
    \ tables.app_tables.sources.add_row(name=name.lower(), comment=comment, year=int(year))\n\
    \    \ndef update_languages():\n  languages = tables.app_tables.languages\n  languages.delete_all_rows()\n\
    \  for language in anvil.server.call('fetch_languages'):\n    languages.add_row(language=language)\n\
    \n", is_package: true, id: BISTFIOCBU6FQDCL33YSBA4V3UVGUADF}
exported_table_schema:
- python_name: languages
  client: full
  server: full
  name: Languages
  columns:
    DCySMEqopTk=:
      name: language_short
      type: string
      admin_ui: {order: 2, width: 200}
  id: 170496
- python_name: sources
  client: full
  server: full
  name: Sources
  columns:
    B9dVgLOm9_0=:
      name: comment
      type: string
      admin_ui: {order: 1.5, width: 200}
    aeCCj6llpqE=:
      name: include
      type: bool
      admin_ui: {order: 3, width: 200}
    dhxXHAYrbtA=:
      name: name
      type: string
      admin_ui: {order: 1, width: 200}
    zX55If3fnf0=:
      name: year
      type: number
      admin_ui: {order: 4, width: 200}
  id: 170497
services:
- source: /runtime/services/tables.yml
  client_config: {}
  server_config: {}
- source: /runtime/services/anvil/email.yml
  client_config: {}
  server_config: {}
forms:
- components:
  - type: Button
    properties: {role: null, align: center, tooltip: 'To pair this toponym with a
        previously created position, first select it from the drop-down.', border: '',
      enabled: false, foreground: '', visible: true, text: Pair with created, font_size: null,
      font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
      background: '', bold: false, underline: false, icon: ''}
    name: button_select_created
    layout_properties: {column: BNZFOW}
    event_bindings: {click: button_select_created_click}
  - type: Button
    properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
      foreground: '', visible: true, text: Wikipedia, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: button_2
    layout_properties: {column: BNZFOW}
    event_bindings: {click: button_2_click}
  - type: Button
    properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
      foreground: '', visible: true, text: Remove, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: button_1
    layout_properties: {column: BNZFOW}
    event_bindings: {click: button_1_click}
  - type: TextBox
    properties: {role: null, align: left, hide_text: false, tooltip: Press enter when you are done editing to enable the update button.,
      placeholder: '', border: '', enabled: true, foreground: '', visible: true, text: '',
      font_size: null, font: '', spacing_above: small, type: text, spacing_below: small,
      italic: false, background: '', bold: false, underline: false}
    name: text_box_toponym
    layout_properties: {column: OSJSGP}
    data_bindings:
    - {property: text, code: 'self.item[''name'']', writeback: true}
    event_bindings: {pressed_enter: text_box_toponym_pressed_enter}
  - type: TextArea
    properties: {role: null, align: left, height: 145, tooltip: 'Clear comment field,
        write your comment and press "comment" to submit comment.', placeholder: This is an empty comment.,
      border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
      auto_expand: false, font: '', spacing_above: small, spacing_below: small, italic: false,
      background: '', bold: false, underline: false}
    name: text_area_comment
    layout_properties: {column: WBENZM}
    data_bindings:
    - {property: text, code: 'self.item[''comment'']', writeback: true}
    event_bindings: {change: text_area_comment_change}
  - type: Button
    properties: {role: null, align: center, tooltip: 'Press this to update the toponym
        in the database, disabled until you press <enter> in the text field.', border: '',
      enabled: false, foreground: '', visible: true, text: update, font_size: null,
      font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
      background: '', bold: false, underline: false, icon: ''}
    name: button_update
    layout_properties: {column: OSJSGP}
    event_bindings: {click: button_update_click}
  - type: Button
    properties: {role: null, align: center, tooltip: '', border: '', enabled: false,
      foreground: '', visible: true, text: Comment, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: button_comment
    layout_properties: {column: BNZFOW}
    event_bindings: {click: button_comment_click}
  - type: Button
    properties: {role: null, align: center, tooltip: Right-click the map to select coordinates.\nThen press this button to create a position and link this toponym to it.,
      border: '', enabled: false, foreground: '', visible: true, text: Create position,
      font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: button_create
    layout_properties: {column: BNZFOW}
    event_bindings: {click: button_create_click}
  - type: LinearPanel
    properties: {}
    name: linear_panel_1
    layout_properties: {column: WEHHOL}
    components: []
  container:
    type: DataRowPanel
    properties: {role: null, align: left, tooltip: '', border: solid gray 1px, foreground: '',
      auto_display_data: true, visible: true, font_size: null, font: '', spacing_above: none,
      spacing_below: none, italic: false, background: '', bold: false, underline: false}
  class_name: RowTemplateNemo
  code: "from ._anvil_designer import RowTemplateNemoTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nimport webbrowser\n\nclass RowTemplateNemo(RowTemplateNemoTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n\n  def button_1_click(self, **event_args):\n  \
    \  \"\"\"This method is called when the button is clicked\"\"\"\n\n#     alert(self.item['id'])\n\
    \n    server.call('declare_foreign', self.item['id'])\n\n    \n  def button_2_click(self,\
    \ **event_args):\n    alert(self.item['name'])\n    url = 'https://www.wikidata.org/w/index.php?search='\n\
    \    url += self.item['name']\n    webbrowser.open(url)\n#     https://www.wikidata.org/w/index.php?search=\n\
    \    pass\n\n  def text_area_comment_change(self, **event_args):\n    \"\"\"This\
    \ method is called when the text in this text area is edited\"\"\"\n    self.button_comment.enabled\
    \ = True\n\n  def button_comment_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    server.call('comment_toponym',\
    \ self.item['id'], self.text_area_comment.text)\n  \n  def button_update_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    server.call('rename_toponym', self.item['id'], self.text_box_toponym.text)\n\
    \    \n  def text_box_toponym_pressed_enter(self, **event_args):\n    \"\"\"This\
    \ method is called when the user presses Enter in this text box\"\"\"\n    self.button_update.enabled\
    \ = True\n\n  def button_create_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    \n    lat = self.parent.parent.parent.lat\n\
    \    lng = self.parent.parent.parent.lng\n      \n    toponym_id = self.item['id']\n\
    \    source = self.item['source']\n\n    server.call('make_position_for_toponym',\
    \ toponym_id, lat, lng, source)\n  \n    self.parent.parent.parent.update_options()\n\
    \    self.parent.parent.parent.refresh()\n\n\n  def button_select_created_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n#     alert(self.parent.parent.parent.)\n    value = self.parent.parent.parent.drop_down_created.selected_value\n\
    \    t_id, name, p_id = value.split(':')\n    p_id = p_id.strip()\n    \n    toponym_id\
    \ = self.item['id']\n    \n    server.call('connect_created_position', toponym_id,\
    \ p_id, f'NEMO, connected to {p_id}')\n    \n    self.parent.parent.parent.refresh()\n"
  id: ORBZRSJBQDVWMI3GSFSGRYN4UCOEBNLY
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: ColumnPanel
      properties: {role: null, tooltip: '', border: '', foreground: '', visible: true,
        wrap_on: mobile, col_spacing: medium, spacing_above: small, col_widths: '{"ALTUER":30,"GOFMIS":30}',
        spacing_below: small, background: ''}
      name: column_panel_head
      layout_properties: {grid_position: 'DSGBQS,KGWIFJ', full_width_row: true}
      components:
      - type: DataRowPanel
        properties: {}
        name: data_row_panel_1
        layout_properties: {grid_position: 'DNAYUL,ALTUER QZCWCU,GXULGD', full_width_row: true}
        components:
        - type: DataGrid
          properties:
            role: null
            columns:
            - {id: XJCXOY, title: Added toponym ID, data_key: added_toponym_id}
            - {id: MJIUPZ, title: Toponym, data_key: newname}
            - {id: NQPJID, title: Source short name, data_key: source_fk}
            auto_header: true
            tooltip: This table shows the location that has multiple candidates for which it could merge and which phase of the automatic matching that led to it having multiple candidates.
            border: ''
            foreground: ''
            rows_per_page: 1
            visible: true
            wrap_on: never
            show_page_controls: false
            spacing_above: small
            spacing_below: small
            background: ''
          name: target_grid
          layout_properties: {column: null}
          components:
          - type: RepeatingPanel
            properties: {spacing_above: none, spacing_below: none, item_template: Disambiguator_package.Disambiguator.disambiguatee_row}
            name: repeating_panel_target
            layout_properties: {}
          - type: ColumnPanel
            properties: {col_widths: '{}'}
            name: column_panel_2
            layout_properties: {}
            components:
            - type: Button
              properties: {role: null, align: center, tooltip: 'If you are sure that
                  the above mentioned toponym is not part of your geographical region
                  of, this button will let you declare if "foreign". It will remain
                  in the databse, but the disambiguator and export will ignore it.',
                border: '', enabled: true, foreground: '', visible: true, text: Ignore toponym,
                font_size: null, font: '', spacing_above: small, icon_align: left,
                spacing_below: small, italic: false, background: '', bold: false,
                underline: false, icon: ''}
              name: button_declare_foreign
              layout_properties: {grid_position: 'AQKVZW,AATQDO', slot: footer}
              event_bindings: {click: button_declare_foreign_click}
            - type: Button
              properties: {role: null, align: center, tooltip: 'Reject all suggestions,
                  change the toponym and generate new suggestions.', border: '', enabled: true,
                foreground: '', visible: true, text: Update toponym, font_size: null,
                font: '', spacing_above: small, icon_align: left, spacing_below: small,
                italic: false, background: '', bold: false, underline: false, icon: ''}
              name: button_update_toponym
              layout_properties: {grid_position: 'AQKVZW,GIFVFX'}
              event_bindings: {click: button_update_toponym_click}
        - type: ColumnPanel
          properties: {col_widths: '{}'}
          name: column_panel_1
          layout_properties: {column: null}
          components:
          - type: Button
            properties: {role: null, align: center, tooltip: Go to first, border: '',
              enabled: true, foreground: '', visible: true, text: '|<<', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_first
            layout_properties: {grid_position: 'MAGKFS,EURJFW'}
            event_bindings: {click: button_first_click}
          - type: Button
            properties: {role: null, align: center, tooltip: Go to previous, border: '',
              enabled: true, foreground: '', visible: true, text: <, font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_prev
            layout_properties: {grid_position: 'MAGKFS,SMYCPX'}
            event_bindings: {click: button_prev_click}
          - type: TextBox
            properties: {}
            name: text_box_n
            layout_properties: {grid_position: 'MAGKFS,FJJUNX'}
            event_bindings: {pressed_enter: text_box_n_pressed_enter}
          - type: Label
            properties: {role: null, align: left, tooltip: Total number of names that need to be disambiguated.,
              border: '', foreground: '', visible: true, text: '', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: text_progress
            layout_properties: {grid_position: 'MAGKFS,JBGVCK'}
            data_bindings: []
          - type: Button
            properties: {role: null, align: center, tooltip: Go to next, border: '',
              enabled: true, foreground: '', visible: true, text: '>', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_next
            layout_properties: {grid_position: 'MAGKFS,ECQKJX'}
            event_bindings: {click: button_next_click}
          - type: Button
            properties: {role: null, align: center, tooltip: Go to last, border: '',
              enabled: true, foreground: '', visible: true, text: '>>|', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_last
            layout_properties: {grid_position: 'MAGKFS,WIUYCE'}
            event_bindings: {click: button_last_click}
      - type: DropDown
        properties:
          role: null
          align: full
          tooltip: Pick the candidate from the list below that you want to connect the above listed name to.
          placeholder: Pick location
          border: ''
          enabled: true
          foreground: ''
          items: []
          visible: true
          font_size: null
          font: ''
          spacing_above: small
          spacing_below: small
          italic: false
          background: ''
          bold: false
          underline: false
          include_placeholder: true
        name: drop_down_loc_picker
        layout_properties: {grid_position: 'DNAYUL,ALTUER AAVKIO,WDWUNP', full_width_row: true}
        event_bindings: {change: drop_down_loc_picker_change}
      - type: Button
        properties: {role: null, align: center, tooltip: Once you are satisfied with the location pressing this button will link,
          border: '', enabled: false, foreground: '', visible: true, text: Disambiguate!,
          font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
          italic: false, background: '', bold: false, underline: false, icon: ''}
        name: button_disambiguate
        layout_properties: {grid_position: 'DNAYUL,ALTUER AAVKIO,IOSJYU', full_width_row: true}
        event_bindings: {click: button_disambiguate_click}
      - type: GoogleMap
        properties: {height: 303}
        name: map_1
        layout_properties: {grid_position: 'DNAYUL,GOFMIS ZXERIY,DZAPJA', full_width_row: true}
        event_bindings: {rightclick: map_1_rightclick}
      - type: Button
        properties: {role: null, align: center, tooltip: Right click the map to select a pair of coordinates. Then press this button to create a new position and attach the toponym to it.,
          border: '', enabled: false, foreground: '', visible: true, text: Make Position,
          font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
          italic: false, background: '', bold: false, underline: false, icon: ''}
        name: button_make_position
        layout_properties: {grid_position: 'DNAYUL,GOFMIS YTXPOE,GSMAPP', full_width_row: true}
        event_bindings: {click: button_make_position_click}
    - type: CheckBox
      properties: {role: null, align: left, tooltip: 'When you (un)check this checkbox
          all the checkboxes below will become (un)checked as well.\nNote: (un)checking
          them does not affect this box.', border: '', enabled: true, foreground: '',
        allow_indeterminate: false, visible: true, text: (De)Select all, font_size: null,
        font: '', spacing_above: small, spacing_below: small, italic: false, background: '',
        bold: false, checked: true, underline: false}
      name: check_box_super
      layout_properties: {grid_position: 'WAKIAK,ZOVYVK'}
      event_bindings: {change: check_box_super_change}
    - type: Button
      properties: {role: null, align: center, tooltip: 'Remove selected toponym from
          consideration. \nIf all options are rejected, the auto matcher will be started
          in the background to find new suggestions.', border: '', enabled: true,
        foreground: '', visible: true, text: Reject, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: button_remove
      layout_properties: {grid_position: 'WAKIAK,BBAKRR'}
      event_bindings: {click: button_remove_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Move to the merging facility with the selected positions.,
        border: '', enabled: true, foreground: '', visible: true, text: Merge, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_merge
      layout_properties: {grid_position: 'WAKIAK,IFCRVJ'}
      event_bindings: {click: button_merge_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Remove the selected positions and all their associated toponyms from the database.,
        border: '', enabled: true, foreground: '', visible: true, text: Remove positions,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_1
      layout_properties: {grid_position: 'WAKIAK,ZRBILW'}
      event_bindings: {click: button_1_click}
    - type: DataGrid
      properties:
        role: null
        columns:
        - {id: SHAHUD, title: Select, data_key: selected}
        - {id: NPEMPS, title: ToponymID, data_key: oldid}
        - {id: PEUSPU, title: Toponym, data_key: oldname}
        - {id: XZARVH, title: Pairing comment, data_key: suggestioncomment, expand: true}
        - {id: IGZVPM, title: Position ID, data_key: pid}
        - {id: XZHUJP, title: Position comment, data_key: pcomment, expand: true}
        - {id: EPVMKW, title: Linked toponyms, data_key: paltnames}
        - {id: KQMDSK, title: Region Name, data_key: adminname}
        - {id: JBENRY, title: Latitude, data_key: latitude}
        - {id: WVJTEK, title: Longitude, data_key: longitude}
        auto_header: true
        tooltip: ''
        border: ''
        foreground: ''
        rows_per_page: 50
        visible: true
        wrap_on: never
        show_page_controls: false
        spacing_above: none
        spacing_below: none
        background: ''
      name: data_grid_options
      layout_properties: {grid_position: 'JVPGWX,PSTCYV', full_width_row: true}
      components:
      - type: RepeatingPanel
        properties: {role: null, tooltip: These are all the names associated with positions that have a name matching the above location.,
          border: '', foreground: '', items: null, visible: true, spacing_above: none,
          spacing_below: none, item_template: Disambiguator_package.Disambiguator.disambiguater_row,
          background: ''}
        name: repeating_panel_options
        layout_properties: {}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: center, tooltip: '', border: '', foreground: '',
      visible: true, text: Disambiguator, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: Title
    layout_properties: {slot: title}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  code: "from ._anvil_designer import DisambiguatorTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom ...Disambiguator_package import\
    \ row_selected_filter\n\nfrom collections import Counter\n\ndef click_generator(label):\n\
    \  \n  def marker_click(sender, **event_args):\n    i = GoogleMap.InfoWindow(content=Label(text=label))\n\
    \    i.open(map, sender)\n    \n  return marker_click\n  \n  \nclass Disambiguator(DisambiguatorTemplate):\n\
    \  def __init__(self, n=0, **properties):\n    # Set Form properties and Data\
    \ Bindings.\n    self.init_components(**properties)\n\n    self.N = 0 \n    self.n\
    \ = n\n    self.name = \"\"\n    \n    self.set_event_handler('x-refresh', self.refresh)\n\
    \    \n    self.goto(self.n)\n    \n    self.refresh()\n    # Any code you write\
    \ here will run when the form opens.\n  \n  def refresh(self, **event_args):\n\
    \    # Will need to update the header and tables based on the input.      \n \
    \   \n    self.button_disambiguate.enabled = False\n    \n    self.text_box_n.text\
    \ = f'{self.n +1}'\n    self.text_progress.text = f'{self.N}'\n  \n    options\
    \ = [(option['oldid'], option['oldname'], option['pid']) for option in self.repeating_panel_options.items]\n\
    \    self.drop_down_loc_picker.items = [f'{idx} : {name} : {pos}' for idx, name,\
    \ pos in options if idx != 'N/A']\n    \n    if self.repeating_panel_options.items\
    \ is not None:\n      self.button_remove.enabled = True\n      \n    # hiding\
    \ the coordinage columns\n    columns = [c for c in self.data_grid_options.columns\
    \ if c['title'] in ('Longitude', 'Latitude')]\n    self.hidden_columns = []\n\
    \    for c in columns:\n      self.hidden_columns.append(c)\n      self.data_grid_options.columns.remove(c)\n\
    \      self.data_grid_options.columns = self.data_grid_options.columns\n\n   \
    \   \n    positions = {row['pid'] for row in self.repeating_panel_options.items\
    \ if row['pid'] != 'N/A'}\n    if len(positions) == 1:\n      c = Counter(option[1]\
    \ for option in options)\n      most_common = c.most_common(1)[0]\n      for option\
    \ in options:\n        if option[1] == most_common:\n          idx, name = option\n\
    \          break\n      \n      user_agreed = confirm(f'All the listed names are\
    \ linked to the same position.\\n Would you like to use the most common name ({name}\
    \ with id {idx})?')\n      if user_agreed:\n        user_agreed = confirm(f'Are\
    \ you sure?')\n        if user_agreed:\n        \n          self.disambiguate(idx)\n\
    \    \n      \n  \n  def goto(self, target):\n    self.button_remove.enabled =\
    \ False\n    # need to call a function from the server that returns the nth position\
    \ of the things \n    # that are still to be disambiguated\n    # As well as the\
    \ actual position in the list and the current length of the list\n    \n#    \
    \ alert(f'Going to {target}')\n    \n    index_info, target_data = anvil.server.call('goto_disambiguator',\
    \ target)\n\n#     alert(f'Received {index_info}')\n\n    self.repeating_panel_target.items\
    \ = target_data[:1]\n\n      \n    self.repeating_panel_options.items = target_data\n\
    \n    self.n, self.N = index_info\n    \n    # nulling map!\n    for component\
    \ in self.map_1.get_components():\n      component.remove_from_parent()\n    \
    \  \n    if len(target_data) > 0 and  target_data[0]['added_toponym_id'] != 'No\
    \ toponyms':\n      for option in self.repeating_panel_options.items:\n      \
    \    marker = GoogleMap.Marker(animation=GoogleMap.Animation.DROP,\n         \
    \                       position=GoogleMap.LatLng(option['latitude'], option['longitude']),\n\
    \                                label=option['pid'])\n          old_name = option['oldname']\n\
    \          pid = option['pid']\n          label = f'{old_name} ({pid})'\n    \
    \      marker.add_event_handler('click', click_generator(label))\n          self.map_1.add_component(marker)\n\
    \      \n      self.map_1.center = GoogleMap.LatLng(49.062915, 17.583981)\n  #\
    \     self.map_1.center = GoogleMap.LatLng(50.083333,14.416667)\n      self.map_1.zoom\
    \ = 6\n    \n\n    # then trigger a refresh\n    get_open_form().raise_event('x-refresh')\n\
    \n  def button_first_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the button is clicked\"\"\"\n    self.goto(0)\n  \n  def button_prev_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    self.goto(max(0, self.n-1))\n  \n  def text_box_n_pressed_enter(self,\
    \ **event_args):\n    \"\"\"This method is called when the user presses Enter\
    \ in this text box\"\"\"\n    number = self.text_box_n.text\n    if number.isdigit():\n\
    \      self.goto(int(number) - 1)\n\n  def button_next_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    self.goto(self.n+1)\n\
    \n  def button_last_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the button is clicked\"\"\"\n    self.goto(self.N)\n\n  def drop_down_loc_picker_change(self,\
    \ **event_args):\n    \"\"\"This method is called when an item is selected\"\"\
    \"\n    if self.drop_down_loc_picker.selected_value is None:\n      self.button_disambiguate.enabled\
    \ = False\n    else:\n      self.button_disambiguate.enabled = True\n\n  def button_disambiguate_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    \n    option_id = (self.drop_down_loc_picker.selected_value.split('\
    \ : ')[0])\n    self.disambiguate(option_id)\n  \n  def disambiguate(self, option_id):\n\
    \    anvil.server.call('disambiguate',\n                      self.repeating_panel_target.items[0]['added_toponym_id'],\n\
    \                      option_id,\n                     )\n    self.goto(self.n)\n\
    \    \n  def button_remove_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the button is clicked\"\"\"\n    removals = [row['oldid'] for row\
    \ in filter(row_selected_filter, self.repeating_panel_options.items)]\n    if\
    \ len(removals) == 0:\n      alert('Nothing was selected for removal')\n     \
    \ return False\n      \n    if len(removals) == len(self.repeating_panel_options.items):\n\
    \      remove_message = 'ALL'\n    else:\n      remove_message = str(len(removals))\n\
    \    \n    user_sure = confirm(f'You are about to remove {remove_message} suggestions\
    \ PERMANENTLY, are you sure?')\n    if user_sure:\n      anvil.server.call('remove_disambiguation_options',\n\
    \                       self.repeating_panel_target.items[0]['added_toponym_id'],\n\
    \                       removals)\n      if remove_message == 'ALL':\n       \
    \ foreground = confirm('All suggestions were removed, do you want to wait while\
    \ the automatching runs? If not, it will simply run in the background.')\n   \
    \     if foreground:\n          source_fk = self.repeating_panel_target.items[0]['source_fk']\n\
    \          toponym_id = self.repeating_panel_target.items[0]['added_toponym_id']\n\
    \n          res = anvil.server.call('match_one_wait', toponym_id, source_fk)\n\
    \        \n          print(res)\n          \n          self.goto(self.n)\n   \
    \     \n        else:\n          anvil.server.call('start_matcher', self.repeating_panel_target.items[0]['source_fk'])\n\
    \      self.goto(self.n)\n    else:\n      alert('Pfft ... Coward!')\n      return\
    \ False\n\n  def button_merge_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    pass\n    # first we collect\
    \ the position_ids of the selected points\n    selected = {row['pid'] for row\
    \ in filter(row_selected_filter, self.repeating_panel_options.items)}\n    if\
    \ len(selected) < 2:\n      return alert('Fewer than two positions were selected\
    \ for merging')\n    \n    open_form('Disambiguator_package.Position_merger',\
    \ positions=selected, disambig_n = self.n)\n    \n    \n#     user_sure = confirm(f'You\
    \ are about to enter the Merging interface for the {len(selected)} options, are\
    \ you sure?')\n#     if user_sure:\n#       open_form('Disambiguator_package.Position_merger',\
    \ positions=selected, disambig_n = self.n)\n#     else:\n#       pass    \n\n\
    \  def button_declare_foreign_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    toponym = self.repeating_panel_target.items[0]['newname']\n\
    \    source = self.repeating_panel_target.items[0]['source_fk']\n    sure = confirm(f'Are\
    \ you sure that you want to declare {toponym} from {source} '\n              \
    \     'as a foreign/irrelevant toponym? \\n It can be very difficult to undo this\
    \ change.')\n    if sure:\n      server.call('declare_foreign', self.repeating_panel_target.items[0]['added_toponym_id'])\n\
    \      self.goto(self.n)\n\n  def check_box_super_change(self, **event_args):\n\
    \    \"\"\"This method is called when this checkbox is checked or unchecked\"\"\
    \"\n\n    val = self.check_box_super.checked\n    \n    for component in self.repeating_panel_options.get_components():\n\
    \      component.check_box_selected.checked = val\n      component.item['selected']\
    \ = val\n      \n  def button_1_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    pass\n    selected = {row['pid']\
    \ for row in filter(row_selected_filter, self.repeating_panel_options.items)}\n\
    \    \n    n_selected = len(selected)\n    if n_selected == 0:\n      alert('No\
    \ positions were selected')\n      return None\n    \n    user_sure = confirm(f'You\
    \ are about to remove {n_selected} positions, '\n                        'and\
    \ all their associated toponyms, from the database.'\n                       \
    \ 'Proceed with great care.')\n    if not user_sure:\n      return None\n    \n\
    \    user_sure = confirm('Removing the positions and all their toponyms from the\
    \ database '\n                        'can entail many operations and therefore\
    \ take a while.\\n'\n                        'Do you want to continue?')\n   \
    \ if not user_sure:\n      return None\n    \n    user_sure = confirm('Last chance\
    \ to change your mind, do you want to remove the positions and associated toponyms?')\n\
    \    if not user_sure:\n      return None\n\n    \n    server.call('erase_positions',\
    \ list(selected))\n    self.goto(self.n)\n\n  def map_1_rightclick(self, lat_lng,\
    \ **event_args):\n    \"\"\"This method is called for a right-click on the geometry.\"\
    \"\"\n    self.lat = lat_lng.lat()\n    self.lng = lat_lng.lng()\n        \n \
    \   self.button_make_position.enabled = True\n    self.button_make_position.text\
    \ = f'Create and choose: ({self.lat:.6f},  {self.lng:.6f})'\n  \n  \n  def button_make_position_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    toponym_id = self.repeating_panel_target.items[0]['added_toponym_id']\n\
    \    source = self.repeating_panel_target.items[0]['source_fk']\n\n    if toponym_id\
    \ == 'No toponyms':\n      return False\n    \n    server.call('make_position_for_toponym',\
    \ toponym_id, self.lat, self.lng, source)\n    \n    self.goto(self.n)\n    \n\
    \    \n\n  def button_update_toponym_click(self, **event_args):\n    \"\"\"This\
    \ method is called when the button is clicked\"\"\"\n    toponym_id = self.repeating_panel_target.items[0]['added_toponym_id']\n\
    \    toponym = self.repeating_panel_target.items[0]['newname']\n\n    if self.toponym_original.strip()\
    \ == toponym.strip():\n      alert(f'{self.toponym_original} == {toponym} '\n\
    \            'the update will not be processed.')\n    elif confirm(f'You are\
    \ about to change the toponym from \"{self.toponym_original}\" to \"{toponym}\"\
    \ '\n                 'do you want to proceed?'):\n    \n      # set everything\
    \ to true\n      self.check_box_super.checked = True\n  \n      # change toponym\
    \ \n      server.call('rename_toponym', toponym_id, toponym)\n      \n      #\
    \ reject all suggestions\n      self.button_remove_click()\n#     server.call('rename_toponym',\
    \ self.repeating_panel_target.items[0]['added_toponym_id'],\n#               \
    \  self.repeating_panel_target.items[0]['newname'])\n\n\n"
  class_name: Disambiguator_package.Disambiguator
  id: GSPFLXOFRIK2AFSQFGNZA546VBUSC4HE
- container: {type: DataRowPanel}
  components:
  - type: TextBox
    properties: {}
    name: text_box_toponym
    layout_properties: {column: MJIUPZ}
    data_bindings:
    - {property: text, code: 'self.item[''newname'']', writeback: true}
    event_bindings: {}
  is_package: true
  code: "from ._anvil_designer import disambiguatee_rowTemplate\nfrom anvil import\
    \ *\nimport anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass disambiguatee_row(disambiguatee_rowTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n    \n\n"
  class_name: Disambiguator_package.Disambiguator.disambiguatee_row
  id: 6XZ5ERD6RVGG236I6YV7BKXERKFAGHKX
- container:
    type: DataRowPanel
    properties: {role: null, align: left, tooltip: Select for interaction, border: solid 0.5px gray,
      foreground: '', auto_display_data: true, visible: true, font_size: null, font: '',
      spacing_above: none, spacing_below: none, italic: false, background: '', bold: false,
      underline: false}
  components:
  - type: CheckBox
    properties: {role: null, align: left, tooltip: 'Select for removing, merging or
        plotting', border: '', enabled: true, foreground: '', allow_indeterminate: false,
      visible: true, text: '', font_size: null, font: '', spacing_above: small, spacing_below: small,
      italic: false, background: '', bold: false, checked: true, underline: false}
    name: check_box_selected
    layout_properties: {column: SHAHUD}
    event_bindings: {change: check_box_selected_change}
    data_bindings:
    - {property: checked, code: 'self.item[''selected'']', writeback: true}
  is_package: true
  code: "from ._anvil_designer import disambiguater_rowTemplate\nfrom anvil import\
    \ *\nimport anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass disambiguater_row(disambiguater_rowTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n#   def check_box_selected_change(self, **event_args):\n\
    #     \"\"\"This method is called when this checkbox is checked or unchecked\"\
    \"\"\n# #     alert(self.item['selected'])\n#     alert(self.item)\n\n  def check_box_selected_change(self,\
    \ **event_args):\n    \"\"\"This method is called when this checkbox is checked\
    \ or unchecked\"\"\"\n    pass\n  \n\n\n"
  class_name: Disambiguator_package.Disambiguator.disambiguater_row
  id: PRXP6TWBOSVOLNPAPL2WWBOVHETKPQGA
- components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: GoogleMap
      properties: {height: 303}
      name: map_1
      layout_properties: {grid_position: 'LWOEGS,BGIUQY', full_width_row: true}
      event_bindings: {rightclick: map_1_rightclick}
    - type: Button
      properties: {role: null, align: center, tooltip: Right click the map to select a pair of coordinates. Then press this button to create a new position and attach the toponym to it.,
        border: '', enabled: false, foreground: '', visible: true, text: Make Position,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_make_position
      layout_properties: {grid_position: 'OPGBUV,VRXXZD', full_width_row: true}
      event_bindings: {click: button_make_position_click}
    - type: DataGrid
      properties:
        role: null
        columns:
        - {id: XJCXOY, title: Added toponym ID, data_key: added_toponym_id}
        - {id: MJIUPZ, title: Toponym, data_key: newname}
        - {id: NQPJID, title: Source short name, data_key: source_fk}
        auto_header: true
        tooltip: This table shows the location that has multiple candidates for which it could merge and which phase of the automatic matching that led to it having multiple candidates.
        border: ''
        foreground: ''
        rows_per_page: 1
        visible: true
        wrap_on: never
        show_page_controls: false
        spacing_above: small
        spacing_below: small
        background: ''
      name: target_grid
      layout_properties: {column: null, grid_position: 'ZLRQYQ,LUANFN'}
      components:
      - type: RepeatingPanel
        properties: {spacing_above: none, spacing_below: none, item_template: Disambiguator_package.Disambiguator.disambiguatee_row}
        name: repeating_panel_target
        layout_properties: {}
      - type: ColumnPanel
        properties: {col_widths: '{}'}
        name: column_panel_2
        layout_properties: {}
        components:
        - type: Button
          properties: {role: null, align: center, tooltip: 'If you are sure that the
              above mentioned toponym is not part of your geographical region of,
              this button will let you declare if "foreign". It will remain in the
              databse, but the disambiguator and export will ignore it.', border: '',
            enabled: true, foreground: '', visible: true, text: Ignore toponym, font_size: null,
            font: '', spacing_above: small, icon_align: left, spacing_below: small,
            italic: false, background: '', bold: false, underline: false, icon: ''}
          name: button_declare_foreign
          layout_properties: {grid_position: 'AQKVZW,AATQDO', slot: footer}
          event_bindings: {click: button_declare_foreign_click}
        - type: Button
          properties: {role: null, align: center, tooltip: 'Reject all suggestions,
              change the toponym and generate new suggestions.', border: '', enabled: true,
            foreground: '', visible: true, text: Update toponym, font_size: null,
            font: '', spacing_above: small, icon_align: left, spacing_below: small,
            italic: false, background: '', bold: false, underline: false, icon: ''}
          name: button_update_toponym
          layout_properties: {grid_position: 'AQKVZW,GIFVFX'}
          event_bindings: {click: button_update_toponym_click}
    - type: ColumnPanel
      properties: {role: null, tooltip: '', border: '', foreground: '', visible: true,
        wrap_on: mobile, col_spacing: medium, spacing_above: small, col_widths: '{"ALTUER":30}',
        spacing_below: small, background: ''}
      name: column_panel_head
      layout_properties: {grid_position: 'DSGBQS,KGWIFJ', full_width_row: true}
      components:
      - type: DataRowPanel
        properties: {}
        name: data_row_panel_1
        layout_properties: {grid_position: 'QZCWCU,GXULGD', full_width_row: true}
        components:
        - type: ColumnPanel
          properties: {col_widths: '{}'}
          name: column_panel_1
          layout_properties: {column: null}
          components:
          - type: Button
            properties: {role: null, align: center, tooltip: Go to first, border: '',
              enabled: true, foreground: '', visible: true, text: '|<<', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_first
            layout_properties: {grid_position: 'MAGKFS,EURJFW'}
            event_bindings: {click: button_first_click}
          - type: Button
            properties: {role: null, align: center, tooltip: Go to previous, border: '',
              enabled: true, foreground: '', visible: true, text: <, font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_prev
            layout_properties: {grid_position: 'MAGKFS,SMYCPX'}
            event_bindings: {click: button_prev_click}
          - type: TextBox
            properties: {}
            name: text_box_n
            layout_properties: {grid_position: 'MAGKFS,FJJUNX'}
            event_bindings: {pressed_enter: text_box_n_pressed_enter}
          - type: Label
            properties: {role: null, align: left, tooltip: Total number of names that need to be disambiguated.,
              border: '', foreground: '', visible: true, text: '', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: text_progress
            layout_properties: {grid_position: 'MAGKFS,JBGVCK'}
            data_bindings: []
          - type: Button
            properties: {role: null, align: center, tooltip: Go to next, border: '',
              enabled: true, foreground: '', visible: true, text: '>', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_next
            layout_properties: {grid_position: 'MAGKFS,ECQKJX'}
            event_bindings: {click: button_next_click}
          - type: Button
            properties: {role: null, align: center, tooltip: Go to last, border: '',
              enabled: true, foreground: '', visible: true, text: '>>|', font_size: null,
              font: '', spacing_above: small, icon_align: left, spacing_below: small,
              italic: false, background: '', bold: false, underline: false, icon: ''}
            name: button_last
            layout_properties: {grid_position: 'MAGKFS,WIUYCE'}
            event_bindings: {click: button_last_click}
      - type: DropDown
        properties:
          role: null
          align: full
          tooltip: Pick the candidate from the list below that you want to connect the above listed name to.
          placeholder: Pick location
          border: ''
          enabled: true
          foreground: ''
          items: []
          visible: true
          font_size: null
          font: ''
          spacing_above: small
          spacing_below: small
          italic: false
          background: ''
          bold: false
          underline: false
          include_placeholder: true
        name: drop_down_loc_picker
        layout_properties: {grid_position: 'AAVKIO,WDWUNP', full_width_row: true}
        event_bindings: {change: drop_down_loc_picker_change}
      - type: Button
        properties: {role: null, align: center, tooltip: Once you are satisfied with the location pressing this button will link,
          border: '', enabled: false, foreground: '', visible: true, text: Disambiguate!,
          font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
          italic: false, background: '', bold: false, underline: false, icon: ''}
        name: button_disambiguate
        layout_properties: {grid_position: 'AAVKIO,IOSJYU', full_width_row: true}
        event_bindings: {click: button_disambiguate_click}
    - type: CheckBox
      properties: {role: null, align: left, tooltip: 'When you (un)check this checkbox
          all the checkboxes below will become (un)checked as well.\nNote: (un)checking
          them does not affect this box.', border: '', enabled: true, foreground: '',
        allow_indeterminate: false, visible: true, text: (De)Select all, font_size: null,
        font: '', spacing_above: small, spacing_below: small, italic: false, background: '',
        bold: false, checked: true, underline: false}
      name: check_box_super
      layout_properties: {grid_position: 'WAKIAK,ZOVYVK'}
      event_bindings: {change: check_box_super_change}
    - type: Button
      properties: {role: null, align: center, tooltip: 'Remove selected toponym from
          consideration. \nIf all options are rejected, the auto matcher will be started
          in the background to find new suggestions.', border: '', enabled: true,
        foreground: '', visible: true, text: Reject, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: button_remove
      layout_properties: {grid_position: 'WAKIAK,LNLYQW'}
      event_bindings: {click: button_remove_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Move to the merging facility with the selected positions.,
        border: '', enabled: true, foreground: '', visible: true, text: Merge, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_merge
      layout_properties: {grid_position: 'WAKIAK,IFCRVJ'}
      event_bindings: {click: button_merge_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Remove the selected positions and all their associated toponyms from the database.,
        border: '', enabled: true, foreground: '', visible: true, text: Remove positions,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_1
      layout_properties: {grid_position: 'WAKIAK,ZRBILW'}
      event_bindings: {click: button_1_click}
    - type: DataGrid
      properties:
        role: null
        columns:
        - {id: SHAHUD, title: Select, data_key: selected}
        - {id: NPEMPS, title: ToponymID, data_key: oldid}
        - {id: PEUSPU, title: Toponym, data_key: oldname}
        - {id: XZARVH, title: Pairing comment, data_key: suggestioncomment, expand: true}
        - {id: IGZVPM, title: Position ID, data_key: pid}
        - {id: XZHUJP, title: Position comment, data_key: pcomment, expand: true}
        - {id: EPVMKW, title: Linked toponyms, data_key: paltnames}
        - {id: KQMDSK, title: Region Name, data_key: adminname}
        - {id: JBENRY, title: Latitude, data_key: latitude}
        - {id: WVJTEK, title: Longitude, data_key: longitude}
        auto_header: true
        tooltip: ''
        border: ''
        foreground: ''
        rows_per_page: 50
        visible: true
        wrap_on: never
        show_page_controls: false
        spacing_above: none
        spacing_below: none
        background: ''
      name: data_grid_options
      layout_properties: {grid_position: 'JVPGWX,PSTCYV', full_width_row: true}
      components:
      - type: RepeatingPanel
        properties: {role: null, tooltip: These are all the names associated with positions that have a name matching the above location.,
          border: '', foreground: '', items: null, visible: true, spacing_above: none,
          spacing_below: none, item_template: Disambiguator_package.Disambiguator.disambiguater_row,
          background: ''}
        name: repeating_panel_options
        layout_properties: {}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: center, tooltip: '', border: '', foreground: '',
      visible: true, text: Weak Matching, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: Title
    layout_properties: {slot: title}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  class_name: Disambiguator_package.Disambiguator2
  code: "from ._anvil_designer import Disambiguator2Template\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom ..Disambiguator_package import\
    \ row_selected_filter\n\nfrom collections import Counter\n\ndef click_generator(label):\n\
    \  \n  def marker_click(sender, **event_args):\n    i = GoogleMap.InfoWindow(content=Label(text=label))\n\
    \    i.open(map, sender)\n    \n  return marker_click\n  \n  \nclass Disambiguator2(Disambiguator2Template):\n\
    \  def __init__(self, n=0, **properties):\n    # Set Form properties and Data\
    \ Bindings.\n    self.init_components(**properties)\n\n    self.N = 0 \n    self.n\
    \ = n\n    self.name = \"\"\n    \n    self.set_event_handler('x-refresh', self.refresh)\n\
    \    \n    self.goto(self.n)\n    \n    self.refresh()\n    # Any code you write\
    \ here will run when the form opens.\n  \n  def refresh(self, **event_args):\n\
    \    # Will need to update the header and tables based on the input.      \n \
    \   \n    self.button_disambiguate.enabled = False\n    \n    self.text_box_n.text\
    \ = f'{self.n +1}'\n    self.text_progress.text = f'{self.N}'\n  \n    options\
    \ = [(option['oldid'], option['oldname'], option['pid']) for option in self.repeating_panel_options.items]\n\
    \    self.drop_down_loc_picker.items = [f'{idx} : {name} : {pos}' for idx, name,\
    \ pos in options if idx != 'N/A']\n    \n    if self.repeating_panel_options.items\
    \ is not None:\n      self.button_remove.enabled = True\n      \n    # hiding\
    \ the coordinage columns\n    columns = [c for c in self.data_grid_options.columns\
    \ if c['title'] in ('Longitude', 'Latitude')]\n    self.hidden_columns = []\n\
    \    for c in columns:\n      self.hidden_columns.append(c)\n      self.data_grid_options.columns.remove(c)\n\
    \      self.data_grid_options.columns = self.data_grid_options.columns\n\n   \
    \   \n    positions = {row['pid'] for row in self.repeating_panel_options.items\
    \ if row['pid'] != 'N/A'}\n    if len(positions) == 1:\n      c = Counter(option[1]\
    \ for option in options)\n      most_common = c.most_common(1)[0]\n      for option\
    \ in options:\n        if option[1] == most_common:\n          idx, name = option\n\
    \          break\n      \n      user_agreed = confirm(f'All the listed names are\
    \ linked to the same position.\\n Would you like to use the most common name ({name}\
    \ with id {idx})?')\n      if user_agreed:\n        user_agreed = confirm(f'Are\
    \ you sure?')\n        if user_agreed:\n        \n          self.disambiguate(idx)\n\
    \    \n      \n  \n  def goto(self, target):\n    self.button_remove.enabled =\
    \ False\n    # need to call a function from the server that returns the nth position\
    \ of the things \n    # that are still to be disambiguated\n    # As well as the\
    \ actual position in the list and the current length of the list\n    \n#    \
    \ alert(f'Going to {target}')\n    target_data = []\n  \n    index_info, target_data\
    \ = anvil.server.call('goto_disambiguator', target, True)\n#     alert(f'Received\
    \ {index_info}')\n\n    self.repeating_panel_target.items = target_data[:1]\n\n\
    \      \n    self.repeating_panel_options.items = target_data\n\n    self.n, self.N\
    \ = index_info\n    \n    \n    # nulling map!\n    for component in self.map_1.get_components():\n\
    \      component.remove_from_parent()\n      \n    if len(target_data) > 0 and\
    \  target_data[0]['added_toponym_id'] != 'No toponyms':\n      for option in self.repeating_panel_options.items:\n\
    \          marker = GoogleMap.Marker(animation=GoogleMap.Animation.DROP,\n   \
    \                             position=GoogleMap.LatLng(option['latitude'], option['longitude']),\n\
    \                                label=option['pid'])\n          old_name = option['oldname']\n\
    \          pid = option['pid']\n          label = f'{old_name} ({pid})'\n    \
    \      marker.add_event_handler('click', click_generator(label))\n          self.map_1.add_component(marker)\n\
    \      \n      self.map_1.center = GoogleMap.LatLng(49.062915, 17.583981)\n  #\
    \     self.map_1.center = GoogleMap.LatLng(50.083333,14.416667)\n      self.map_1.zoom\
    \ = 6\n    \n      next_id, next_toponym = anvil.server.call('next_nemo', target+1)\n\
    #       alert(next_toponym)\n      self.button_next.text = next_toponym      \n\
    \n      anvil.server.call('start_nemo_list', next_id)\n  \n    self.toponym_original\
    \ = self.repeating_panel_target.items[0]['newname']\n\n    # then trigger a refresh\n\
    \    get_open_form().raise_event('x-refresh')\n\n  def button_first_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    self.goto(0)\n  \n  def button_prev_click(self, **event_args):\n   \
    \ \"\"\"This method is called when the button is clicked\"\"\"\n    self.goto(max(0,\
    \ self.n-1))\n  \n  def text_box_n_pressed_enter(self, **event_args):\n    \"\"\
    \"This method is called when the user presses Enter in this text box\"\"\"\n \
    \   number = self.text_box_n.text\n    if number.isdigit():\n      self.goto(int(number)\
    \ - 1)\n\n  def button_next_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    self.goto(self.n+1)\n\n  def\
    \ button_last_click(self, **event_args):\n    \"\"\"This method is called when\
    \ the button is clicked\"\"\"\n    self.goto(self.N)\n\n  def drop_down_loc_picker_change(self,\
    \ **event_args):\n    \"\"\"This method is called when an item is selected\"\"\
    \"\n    if self.drop_down_loc_picker.selected_value is None:\n      self.button_disambiguate.enabled\
    \ = False\n    else:\n      self.button_disambiguate.enabled = True\n\n  def button_disambiguate_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    \n    option_id = (self.drop_down_loc_picker.selected_value.split('\
    \ : ')[0])\n    self.disambiguate(option_id)\n  \n  def disambiguate(self, option_id):\n\
    \    anvil.server.call('disambiguate',\n                      self.repeating_panel_target.items[0]['added_toponym_id'],\n\
    \                      option_id, True\n                     )\n    self.goto(self.n)\
    \    \n    if self.N % 20 == 0:\n        anvil.server.call('start_matcher')\n\
    \    elif self.N % 15 == 0: \n      anvil.server.call('start_nemo_list')\n\n \
    \   \n  def button_remove_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the button is clicked\"\"\"\n    removals = [row['oldid'] for row\
    \ in filter(row_selected_filter, self.repeating_panel_options.items)]\n    if\
    \ len(removals) == 0:\n      alert('Nothing was selected for removal')\n     \
    \ return False\n      \n    if len(removals) == len(self.repeating_panel_options.items):\n\
    \      remove_message = 'ALL'\n    else:\n      remove_message = str(len(removals))\n\
    \    \n    user_sure = confirm(f'You are about to remove {remove_message} suggestions\
    \ PERMANENTLY, are you sure?')\n    if user_sure:\n      anvil.server.call('remove_disambiguation_options',\n\
    \                       self.repeating_panel_target.items[0]['added_toponym_id'],\n\
    \                       removals, True)\n      if remove_message == 'ALL':\n \
    \       foreground = confirm('All suggestions were removed, do you want to wait\
    \ while the automatching runs? If not, it will simply run in the background.')\n\
    \        if foreground:\n          source_fk = self.repeating_panel_target.items[0]['source_fk']\n\
    \          toponym_id = self.repeating_panel_target.items[0]['added_toponym_id']\n\
    \n          res = anvil.server.call('match_one_wait', toponym_id, source_fk)\n\
    \        \n          print(res)\n          \n          self.goto(self.n)\n   \
    \     \n        else:\n          anvil.server.call('start_matcher', self.repeating_panel_target.items[0]['source_fk'])\n\
    \      self.goto(self.n)\n    else:\n      alert('Pfft ... Coward!')\n      return\
    \ False\n\n  def button_merge_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    pass\n    # first we collect\
    \ the position_ids of the selected points\n    selected = {row['pid'] for row\
    \ in filter(row_selected_filter, self.repeating_panel_options.items)}\n    if\
    \ len(selected) < 2:\n      return alert('Fewer than two positions were selected\
    \ for merging')\n    \n    open_form('Disambiguator_package.Position_merger',\
    \ positions=selected, disambig_n = self.n)\n    \n    \n#     user_sure = confirm(f'You\
    \ are about to enter the Merging interface for the {len(selected)} options, are\
    \ you sure?')\n#     if user_sure:\n#       open_form('Disambiguator_package.Position_merger',\
    \ positions=selected, disambig_n = self.n)\n#     else:\n#       pass    \n\n\
    \  def button_declare_foreign_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    toponym = self.repeating_panel_target.items[0]['newname']\n\
    \    source = self.repeating_panel_target.items[0]['source_fk']\n    sure = confirm(f'Are\
    \ you sure that you want to declare {toponym} from {source} '\n              \
    \     'as a foreign/irrelevant toponym? \\n It can be very difficult to undo this\
    \ change.')\n    if sure:\n      server.call('declare_foreign', self.repeating_panel_target.items[0]['added_toponym_id'])\n\
    \      self.goto(self.n)\n\n  def check_box_super_change(self, **event_args):\n\
    \    \"\"\"This method is called when this checkbox is checked or unchecked\"\"\
    \"\n\n    val = self.check_box_super.checked\n    \n    for component in self.repeating_panel_options.get_components():\n\
    \      component.check_box_selected.checked = val\n      component.item['selected']\
    \ = val\n      \n  def button_1_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    pass\n    selected = {row['pid']\
    \ for row in filter(row_selected_filter, self.repeating_panel_options.items)}\n\
    \    \n    n_selected = len(selected)\n    if n_selected == 0:\n      alert('No\
    \ positions were selected')\n      return None\n    \n    user_sure = confirm(f'You\
    \ are about to remove {n_selected} positions, '\n                        'and\
    \ all their associated toponyms, from the database.'\n                       \
    \ 'Proceed with great care.')\n    if not user_sure:\n      return None\n    \n\
    \    user_sure = confirm('Removing the positions and all their toponyms from the\
    \ database '\n                        'can entail many operations and therefore\
    \ take a while.\\n'\n                        'Do you want to continue?')\n   \
    \ if not user_sure:\n      return None\n    \n    user_sure = confirm('Last chance\
    \ to change your mind, do you want to remove the positions and associated toponyms?')\n\
    \    if not user_sure:\n      return None\n\n    \n    server.call('erase_positions',\
    \ list(selected))\n    self.goto(self.n)\n\n  def map_1_rightclick(self, lat_lng,\
    \ **event_args):\n    \"\"\"This method is called for a right-click on the geometry.\"\
    \"\"\n    self.lat = lat_lng.lat()\n    self.lng = lat_lng.lng()\n        \n \
    \   self.button_make_position.enabled = True\n    self.button_make_position.text\
    \ = f'Create and choose: ({self.lat:.6f},  {self.lng:.6f})'\n  \n  \n  def button_make_position_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    toponym_id = self.repeating_panel_target.items[0]['added_toponym_id']\n\
    \    source = self.repeating_panel_target.items[0]['source_fk']\n\n    if toponym_id\
    \ == 'No toponyms':\n      return False\n    \n    server.call('make_position_for_toponym',\
    \ toponym_id, self.lat, self.lng, source)\n    \n    self.goto(self.n)\n    \n\
    \    \n\n  def button_update_toponym_click(self, **event_args):\n    \"\"\"This\
    \ method is called when the button is clicked\"\"\"\n    toponym_id = self.repeating_panel_target.items[0]['added_toponym_id']\n\
    \    toponym = self.repeating_panel_target.items[0]['newname']\n\n    if self.toponym_original.strip()\
    \ == toponym.strip():\n      alert(f'{self.toponym_original} == {toponym} '\n\
    \            'the update will not be processed.')\n    elif confirm(f'You are\
    \ about to change the toponym from \"{self.toponym_original}\" to \"{toponym}\"\
    \ '\n                 'do you want to proceed?'):\n    \n      # set everything\
    \ to true\n      self.check_box_super.checked = True\n  \n      # change toponym\
    \ \n      server.call('rename_toponym', toponym_id, toponym)\n      \n      #\
    \ reject all suggestions\n      self.button_remove_click()        \n\n#     server.call('rename_toponym',\
    \ self.repeating_panel_target.items[0]['added_toponym_id'],\n#               \
    \  self.repeating_panel_target.items[0]['newname'])\n\n\n"
  id: 6WTL64THP37JAMR3HDACZWTDQSTUZXOB
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: DataGrid
      properties:
        role: null
        columns:
        - {id: INXCQS, title: Position ID, data_key: position}
        - {id: DQSVKO, title: Names, data_key: names}
        - {id: EUOELS, title: Latitude, data_key: latitude}
        - {id: ROVXTF, title: Longitude, data_key: longitude}
        - {id: BKINFY, title: Select, data_key: selected}
        auto_header: true
        tooltip: ''
        border: ''
        foreground: ''
        rows_per_page: 20
        visible: true
        wrap_on: never
        show_page_controls: true
        spacing_above: small
        spacing_below: small
        background: ''
      name: data_grid_positions
      layout_properties: {grid_position: 'AJWHLZ,MZXCOM'}
      components:
      - type: RepeatingPanel
        properties: {role: null, tooltip: These are all the selected points with coordinates and all their various names and spellings.,
          border: '', foreground: '', items: null, visible: true, spacing_above: none,
          spacing_below: none, item_template: Disambiguator_package.Position_merger.RowTemplate3,
          background: ''}
        name: repeating_panel_positions
        layout_properties: {}
    - type: TextBox
      properties: {role: null, align: left, hide_text: false, tooltip: 'If you know
          the id (Q\d+) for a point that should be merged, you can add it to the above
          list by typing it here and pressing enter.', placeholder: Add position,
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
        background: '', bold: false, underline: false}
      name: text_box_add
      layout_properties: {grid_position: 'MFFOBG,ZSUDTX'}
      event_bindings: {pressed_enter: text_box_add_pressed_enter}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Back to disambiguator, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_back_to_disambig
      layout_properties: {grid_position: 'MFFOBG,WBIAXK'}
      event_bindings: {click: go_back_to_disambiguator}
    - type: Button
      properties: {role: null, align: center, tooltip: 'Merge the selected points
          into a single synthetic point, using the average longitude and latitude
          for the new position.', border: '', enabled: true, foreground: '', visible: true,
        text: Merge points, font_size: null, font: '', spacing_above: small, icon_align: left,
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: button_merge
      layout_properties: {grid_position: 'MFFOBG,FIUBHW'}
      event_bindings: {click: button_merge_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Show the selected points on the map below.,
        border: '', enabled: true, foreground: '', visible: true, text: Map points,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_map
      layout_properties: {grid_position: 'MFFOBG,HLNKYN'}
      event_bindings: {click: button_map_click}
    - type: GoogleMap
      properties: {scale_control: true, draggable_cursor: auto, heading: 0, fullscreen_control: true,
        dragging_cursor: auto, disable_double_click_zoom: false, height: 391, zoom: 8,
        map_type_control: true, gesture_handling: auto, street_view_control: true,
        visible: true, scroll_wheel: true, max_zoom: 18, draggable: true, min_zoom: 0,
        spacing_above: small, keyboard_shortcuts: true, spacing_below: small, background_color: '',
        rotate_control: true, zoom_control: true, disable_default_ui: false, clickable_icons: true}
      name: map_1
      layout_properties: {grid_position: 'SOWHLD,RLMTHL'}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Position Merger, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: title
    layout_properties: {slot: title}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  code: "from ._anvil_designer import Position_mergerTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom ...Disambiguator_package import\
    \ row_selected_filter\n\nfrom collections import Counter\n\n\ndef click_generator(label):\n\
    \  \n  def marker_click(sender, **event_args):\n    i =GoogleMap.InfoWindow(content=Label(text=label))\n\
    \    i.open(map, sender)\n    \n  return marker_click\n\nclass Position_merger(Position_mergerTemplate):\n\
    \  def __init__(self, positions=['Q_ZVIKOV2', 'Q180139', '_multiple_perfects'],\
    \ \n               disambig_n=0, **properties):\n    # Set Form properties and\
    \ Data Bindings.\n    self.init_components(**properties)\n    \n    self.disambig_n\
    \ = disambig_n\n    \n    self.data_grid_positions.tooltip = 'This is the list\
    \ of all the found positions that are currently '\\\n        'considered for merging:\
    \ in ascending order of the number of toponyms currently connected to them.'\\\
    \n        '\\n If you entered an id that does not show up, it has not been recorded.\
    \ Possibly there is an '\\\n        'error in the seeding process, or there was\
    \ a typo in the id you entered. You can always try again.'\n\n    # Any code you\
    \ write here will run when the form opens.\n#     alert(positions)\n    \n   \
    \ self.positions = positions\n\n    self.refresh()\n    \n    self.set_event_handler('x-refresh',\
    \ self.refresh)\n  \n  def go_back_to_disambiguator(self, **events_args):\n  \
    \    open_form('Disambiguator_package.Disambiguator', n=self.disambig_n)\n\n \
    \ def refresh(self, **event_args):\n    results = anvil.server.call('fetch_positions_with_names',\n\
    \                                 list(self.positions))  \n    if results == 'No\
    \ points were found!':\n      go_back = alert(content='Do you want to go back\
    \ to the Disambiguator or Main page? '\n                              '(Sometimes\
    \ this promt appears multiple times, just press X to continue)',\n           \
    \          title='No points were found.',\n                     buttons=[\n  \
    \                     ('Disambiguator', 'disambiguator'),\n                  \
    \     ('Main page', 'mainpage'),\n                       ('Stay', 'stay')\n  \
    \                   ])\n      if go_back == 'disambiguator':\n        self.go_back_to_disambiguator()\n\
    \        return \n      elif go_back == 'mainpage':\n        open_form('Main_page')\n\
    \        return\n      else:\n        self.repeating_panel_positions.items = []\
    \ # nullings\n    else:\n      \n      self.repeating_panel_positions.items =\
    \ [item for item in results]\n      \n\n  def button_merge_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    # first\
    \ we need to parse the rows for relevant information!\n    selected_positions\
    \ = [(row['position'], row['longitude'], row['latitude'], row['names'], row['parent'],\
    \ row['source']) for row in filter(row_selected_filter, self.repeating_panel_positions.items)]\
    \    \n\n    if len(selected_positions) <= 1:\n      alert(f'You have only selected\
    \ {len(selected_positions)} positions to merge')\n      return False\n    \n \
    \   positions, longitudes, latitudes, names, parents, sources  = zip(*selected_positions)\n\
    \    \n    name_counts = Counter([name.lower() for name_row in names for name\
    \ in name_row.split('\\n')])\n\n    new_name = name_counts.most_common(1)[0][0].upper()\
    \ + str(name_counts.most_common(1)[0][1])\n\n    # Giving the user a chance to\
    \ recant and review\n    user_sure = confirm(f'You are about to merge {positions},\
    \ sure?')\n    if user_sure:\n      # merging positions\n      anvil.server.call('merge_positions',\n\
    \                      positions,\n                      longitudes,\n       \
    \               latitudes,\n                      new_name,\n                \
    \       parents,\n                       sources)\n      # Removing used candidates\
    \ from table\n      self.positions = [pos for pos in self.positions if pos not\
    \ in selected_positions]\n      get_open_form().raise_event('x-refresh')\n   \
    \   \n\n  def button_map_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the button is clicked\"\"\"\n    for option in self.repeating_panel_positions.items:\n\
    \      marker = GoogleMap.Marker(animation=GoogleMap.Animation.DROP,\n       \
    \                        position=GoogleMap.LatLng(option['latitude'], option['longitude']),\n\
    \                               label=option['position'])\n      marker.add_event_handler('click',\
    \ click_generator(option['position']))\n      self.map_1.add_component(marker)\n\
    \    \n    self.map_1.center = GoogleMap.LatLng(50.083333,14.416667)\n    self.map_1.zoom\
    \ = 8\n\n  def text_box_add_pressed_enter(self, **event_args):\n    \"\"\"This\
    \ method is called when the user presses Enter in this text box\"\"\"\n    new_Q\
    \ = self.text_box_add.text\n    if new_Q not in self.positions:\n      self.positions\
    \ |= {new_Q}\n    \n      get_open_form().raise_event('x-refresh')\n      self.text_box_add.text\
    \ = ''\n    else:\n      alert('The entered name is already accounted for.')\n\
    \n\n  # need to add functions for adding/removing positions to/from this list.\n\
    \  \n  # Function to map selected points\n  \n  \n  # Call function to merge selected\
    \ points.\n  "
  class_name: Disambiguator_package.Position_merger
  id: RZRN2BXUWKBLSQCQLKWAQG43TERZCLKI
- container: {type: DataRowPanel}
  components:
  - type: CheckBox
    properties: {role: null, align: left, tooltip: '', border: '', enabled: true,
      foreground: '', allow_indeterminate: false, visible: true, text: '', font_size: null,
      font: '', spacing_above: small, spacing_below: small, italic: false, background: '',
      bold: false, checked: true, underline: false}
    name: check_box_selected
    layout_properties: {column: BKINFY}
    data_bindings:
    - {property: checked, code: 'self.item[''selected'']', writeback: true}
    event_bindings: {}
  is_package: true
  code: "from ._anvil_designer import RowTemplate3Template\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass RowTemplate3(RowTemplate3Template):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n"
  class_name: Disambiguator_package.Position_merger.RowTemplate3
  id: TPIK63XRKJRSJJUXSLZBZCH4UZNDMPZY
- components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: DataGrid
      properties:
        role: null
        columns:
        - {id: SDICLZ, title: Source, data_key: name}
        - {id: SFMDZU, title: Year, data_key: year}
        - {id: MNKYQI, title: Include, data_key: include}
        auto_header: true
        tooltip: ''
        border: ''
        foreground: ''
        rows_per_page: 20
        visible: true
        wrap_on: never
        show_page_controls: true
        spacing_above: small
        spacing_below: small
        background: ''
      name: data_grid_1
      layout_properties: {grid_position: 'IQKNDX,TRWDPH'}
      components:
      - type: RepeatingPanel
        properties: {spacing_above: none, spacing_below: none, item_template: RowTemplate4}
        name: repeating_panel_sources
        layout_properties: {}
    - type: Label
      properties: {role: null, align: right, tooltip: 'Enter the radius in km.\nNote:
          the distance is not calculated in km per se, it is approximated using the
          latitude & longitude of the positions.', border: '', foreground: '', visible: true,
        text: 'Radius (~km):', font_size: null, font: '', spacing_above: small, icon_align: left,
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: label_1
      layout_properties: {grid_position: 'IIWCEL,FWEOWT'}
    - type: TextBox
      properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: '',
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        font: '', spacing_above: small, type: number, spacing_below: small, italic: false,
        background: '', bold: false, underline: false}
      name: text_box_radius
      layout_properties: {grid_position: 'IIWCEL,KEDQAJ'}
    - type: Button
      properties: {role: null, align: center, tooltip: Select a source and then press this button to see the export in .tsv format below.,
        border: '', enabled: true, foreground: '', visible: true, text: Cluster, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_cluster
      layout_properties: {grid_position: 'IIWCEL,OXDJEN'}
      event_bindings: {click: button_cluster_click}
    - type: TextArea
      properties: {role: null, align: left, height: '600', tooltip: '', placeholder: '',
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        auto_expand: false, font: '', spacing_above: small, spacing_below: small,
        italic: false, background: '', bold: false, underline: false}
      name: text_area_export
      layout_properties: {grid_position: 'DINABN,BOOBQQ', full_width_row: true}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: 'Cluster Export

        ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: label_title
    layout_properties: {slot: title}
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  class_name: Export_package.Cluster_export
  code: "from ._anvil_designer import Cluster_exportTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom ..Browser_package.Browser\
    \ import update_sources\n\n\nclass Cluster_export(Cluster_exportTemplate):\n \
    \ def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n    \n    update_sources()\n    sources = app_tables.sources.search()\n\
    \    \n    self.repeating_panel_sources.items = sources\n    for component in\
    \ self.repeating_panel_sources.get_components():\n      component.item['include']\
    \ = True\n      component.check_box_1.checked = True\n\n    \n\n  def button_cluster_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    radius = self.text_box_radius.text\n    try:\n      radius = float(radius)\n\
    \    except Exception as e:\n      alert('Could not interpret the radius, are\
    \ you sure that you entered a number?')\n      return False\n  \n    sources =\
    \ [item['name'] for item in self.repeating_panel_sources.items if item['include']]\n\
    \    \n    if len(sources) == 0:\n      alert('No sources were selected')\n  \
    \    return False\n  \n    tsv = server.call('cluster', sources, radius)\n   \
    \ \n    self.text_area_export.text = tsv\n    "
  id: 36FJIKQNOBSLL33ZLJBDTPOTGCES7XXX
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{"UERKRG":30,"VDXAEC":30}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: 'From which source do you want to export data: ', font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: label_source_selector
      layout_properties: {grid_position: 'XGMJRP,UERKRG'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: Select a source to include
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_source
      layout_properties: {grid_position: 'XGMJRP,VDXAEC'}
      event_bindings: {change: drop_down_source_change}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: 'Optional: select a second source that the points MUST
          be in:', font_size: null, font: '', spacing_above: small, icon_align: left,
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: label_source_selector2
      layout_properties: {grid_position: 'KVTHWK,SUCYCM'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: 'Optional: Select a source to include'
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_source2
      layout_properties: {grid_position: 'KVTHWK,UJOHUR'}
      event_bindings: {change: drop_down_source2_change}
    - type: ColumnPanel
      properties: {col_widths: '{}'}
      name: column_panel_1
      layout_properties: {grid_position: 'ULVQMR,LJXRZF'}
      components:
      - type: Label
        properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
          visible: true, text: 'Optional: select a source to exclude:', font_size: null,
          font: '', spacing_above: small, icon_align: left, spacing_below: small,
          italic: false, background: '', bold: false, underline: false, icon: ''}
        name: label_source_deselector
        layout_properties: {grid_position: 'UPWYMF,MPGVLG'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: 'Optional: select a source to exclude'
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_desource
      layout_properties: {grid_position: 'ULVQMR,RRNXDI'}
      event_bindings: {change: drop_down_desource_change}
    - type: Button
      properties: {role: null, align: center, tooltip: Select a source and then press this button to see the export in .tsv format below.,
        border: '', enabled: false, foreground: '', visible: true, text: Generate export,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_select
      layout_properties: {grid_position: 'IIWCEL,OXDJEN'}
      event_bindings: {click: button_select_click}
    - type: TextArea
      properties: {role: null, align: left, height: '600', tooltip: '', placeholder: '',
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        auto_expand: false, font: '', spacing_above: small, spacing_below: small,
        italic: false, background: '', bold: false, underline: false}
      name: text_area_export
      layout_properties: {grid_position: 'DINABN,BOOBQQ', full_width_row: true}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: 'Export

        ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: label_title
    layout_properties: {slot: title}
  code: "from ._anvil_designer import ExportTemplate\nfrom anvil import *\nimport\
    \ anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query as q\n\
    from anvil.tables import app_tables\n\nfrom ...Browser_package.Browser import\
    \ update_sources\n\n\nclass Export(ExportTemplate):\n  def __init__(self, **properties):\n\
    \    # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
    \n    # Any code you write here will run when the form opens.\n    \n    self.source\
    \ = 'Use'\n    self.source2 = None\n    self.no_source = None\n    update_sources()\n\
    \n    self.update_source_dropdown()\n\n  def update_source_dropdown(self):\n \
    \   options = [('Use', 'all', 'sources')]\n    options += [(row['name'], row['comment'],\
    \ row['year']) for row in app_tables.sources.search()]\n    options = [f'{name}\
    \ ; {title} ; {year}' for name, title, year in options]\n    self.drop_down_source.items\
    \ = options\n    self.drop_down_source2.items = options[1:]\n    self.drop_down_desource.items\
    \ = options[1:]\n    \n  def drop_down_source_change(self, **event_args):\n  \
    \  \"\"\"This method is called when an item is selected\"\"\"\n    self.button_select.enabled\
    \ = True\n  \n    \n  def button_select_click(self, **event_args):\n    \"\"\"\
    This method is called when the button is clicked\"\"\"\n    selected = self.drop_down_source.selected_value\n\
    \    if selected is not None:\n      self.source = selected.split(';')[0].strip()\n\
    \    \n    selected = self.drop_down_source2.selected_value\n    if selected is\
    \ not None:\n      self.source2 = selected.split(';')[0].strip()\n    else:\n\
    \      self.source2 = None\n    \n    if self.no_source is not None:\n      self.no_source\
    \ = self.no_source.split(';')[0].strip()\n    else:\n      self.no_source = None\n\
    \    \n    if self.source == self.no_source:\n      alert('You have selected the\
    \ same main source and source for exclusion ')\n      return False\n    \n   \
    \ output = server.call('export_selection', self.source, self.no_source, self.source2)\n\
    \    \n    self.text_area_export.text = output\n\n"
  class_name: Export_package.Export
  id: NFQUK34MNTRNVHT47423IZ4PAFG2FIDM
- components:
  - type: ColumnPanel
    properties: {col_widths: '{"UERKRG":30,"VDXAEC":30}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: 'From which source do you want to export data: ', font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: label_source_selector
      layout_properties: {grid_position: 'XGMJRP,UERKRG'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: Select a source to include
        border: ''
        enabled: true
        foreground: ''
        items: ['']
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_source
      layout_properties: {grid_position: 'XGMJRP,VDXAEC'}
      event_bindings: {change: drop_down_source_change}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: 'Optional: select a second source that the points MUST
          be in:', font_size: null, font: '', spacing_above: small, icon_align: left,
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: label_source_selector2
      layout_properties: {grid_position: 'KVTHWK,SUCYCM'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: 'Optional: Select a source to include'
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_source2
      layout_properties: {grid_position: 'KVTHWK,UJOHUR'}
      event_bindings: {}
    - type: ColumnPanel
      properties: {col_widths: '{}'}
      name: column_panel_1
      layout_properties: {grid_position: 'ULVQMR,LJXRZF'}
      components:
      - type: Label
        properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
          visible: true, text: 'Optional: select a source to exclude:', font_size: null,
          font: '', spacing_above: small, icon_align: left, spacing_below: small,
          italic: false, background: '', bold: false, underline: false, icon: ''}
        name: label_source_deselector
        layout_properties: {grid_position: 'UPWYMF,MPGVLG'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: 'Optional: select a source to exclude'
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_desource
      layout_properties: {grid_position: 'ULVQMR,RRNXDI'}
      event_bindings: {}
    - type: Button
      properties: {role: null, align: center, tooltip: Select a source and then press this button to see the export in .tsv format below.,
        border: '', enabled: false, foreground: '', visible: true, text: Generate export,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_select
      layout_properties: {grid_position: 'IIWCEL,OXDJEN'}
      event_bindings: {click: button_select_click}
    - type: TextArea
      properties: {role: null, align: left, height: '600', tooltip: '', placeholder: '',
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        auto_expand: false, font: '', spacing_above: small, spacing_below: small,
        italic: false, background: '', bold: false, underline: false}
      name: text_area_export
      layout_properties: {grid_position: 'DINABN,BOOBQQ', full_width_row: true}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: 'Export by year - quick solution

        ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: label_title
    layout_properties: {slot: title}
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  class_name: Export_package.Export_by_year
  code: "from ._anvil_designer import Export_by_yearTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom ..Browser_package.Browser\
    \ import update_sources\n\n\nclass Export_by_year(Export_by_yearTemplate):\n \
    \ def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n    \n    self.source = 'Use'\n    self.source2 =\
    \ None\n    self.no_source = None\n    update_sources()\n\n    self.update_source_dropdown()\n\
    \n  def update_source_dropdown(self):\n    options = [('Use', 'all', 'sources')]\n\
    \    options += [(row['name'], row['comment'], row['year']) for row in app_tables.sources.search()]\n\
    \    options = [f'{name} ; {title} ; {year}' for name, title, year in options]\n\
    \    self.drop_down_source.items = options\n    self.drop_down_source2.items =\
    \ options[1:]\n    self.drop_down_desource.items = options[1:]\n    \n  def drop_down_source_change(self,\
    \ **event_args):\n    \"\"\"This method is called when an item is selected\"\"\
    \"\n    self.button_select.enabled = True\n    \n  def button_select_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    selected = self.drop_down_source.selected_value\n    if selected is\
    \ not None:\n      self.source = selected.split(';')[-1].strip()    \n    \n \
    \   selected = self.drop_down_source2.selected_value\n    if selected is not None:\n\
    \      self.source2 = selected.split(';')[-1].strip()\n    else:\n      self.source2\
    \ = None\n\n      self.no_source = self.drop_down_desource.selected_value\n  \
    \  if self.no_source is not None:\n      self.no_source = self.no_source.split(';')[-1].strip()\n\
    \    else:\n      self.no_source = None\n  \n    \n    if self.source == self.no_source:\n\
    \      alert('You have selected the same main source and source for exclusion\
    \ ')\n      return False\n    alert(f'using: {self.source} AND {self.source2}\
    \ -- Exclue {self.no_source}')\n    output = server.call('export_selection_by_year',\
    \ self.source, self.no_source, self.source2)\n    \n    self.text_area_export.text\
    \ = output\n"
  id: FK5HUA2CH7S6PPIH4RAVEOPXRHU4LG4F
- container: {type: DataRowPanel}
  components:
  - type: Button
    properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
      foreground: '', visible: true, text: 'Edit

        ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: button_edit
    layout_properties: {column: XETAIV}
    event_bindings: {click: button_edit_click}
  is_package: true
  code: "from ._anvil_designer import RowTemplate2Template\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nimport webbrowser\n\nclass RowTemplate2(RowTemplate2Template):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n  def button_select_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    \n    alert(self.item['name'])\n\
    \    url = 'https://www.wikidata.org/w/index.php?search='\n    url += self.item['name']\n\
    \    webbrowser.open(url)\n#     https://www.wikidata.org/w/index.php?search=\n\
    \    pass\n\n  def button_1_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    pass\n\n  def button_edit_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    pass\n"
  class_name: RowTemplate2
  id: XRACZHEUDZ2JEYGPFBBR7RJUCQRYE2PH
- container: {type: ColumnPanel}
  components: []
  is_package: true
  item_type: {table_id: 170497}
  code: "from ._anvil_designer import ItemTemplate1Template\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass ItemTemplate1(ItemTemplate1Template):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens."
  class_name: ItemTemplate1
  id: MMHXVA556L6NUW46YCSQUMOAOGPCIRGL
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{"IOAXCD":35,"XCKFJZ":25}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: Select a source (e.g guidebook) to match toponyms FROM TO the mapped toponyms in the database.,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: dropdown_explain
      layout_properties: {grid_position: 'QQXRAH,IOAXCD'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: Match from all sources
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_source
      layout_properties: {grid_position: 'QQXRAH,XCKFJZ'}
      event_bindings: {change: drop_down_source_change}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: 'Run

          ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_run
      layout_properties: {grid_position: 'ELUILM,EBRIDX'}
      event_bindings: {click: button_run_click}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: kill, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: button_kill
      layout_properties: {grid_position: 'ELUILM,EKVRXL'}
      event_bindings: {click: button_kill_click}
    - type: RichText
      properties: {role: null, align: center, tooltip: '', enable_slots: true, border: '',
        foreground: '', visible: true, font_size: null, content: Status message appears here,
        font: '', spacing_above: small, spacing_below: small, data: null, background: '',
        format: markdown}
      name: rich_status
      layout_properties: {grid_position: 'FSTJBX,RQHPCJ'}
    - type: FlowPanel
      properties: {role: null, spacing: medium, align: left, tooltip: '', border: '',
        foreground: '', visible: false, spacing_above: small, spacing_below: small,
        background: ''}
      name: flow_panel_1
      layout_properties: {grid_position: 'UXIUXJ,XPXUFI'}
      components:
      - type: Label
        properties: {}
        name: label_prev_last
        layout_properties: {}
      - type: Label
        properties: {}
        name: label_round
        layout_properties: {}
      - type: Label
        properties: {}
        name: label_iterator
        layout_properties: {}
      - type: Label
        properties: {}
        name: label_last
        layout_properties: {}
      - type: Label
        properties: {}
        name: label_time
        layout_properties: {}
      - type: Label
        properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
          visible: false, text: '', font_size: null, font: '', spacing_above: small,
          icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
          underline: false, icon: ''}
        name: label_optlen
        layout_properties: {}
        event_bindings: {}
    - type: FlowPanel
      properties: {role: null, spacing: medium, align: left, tooltip: '', border: '',
        foreground: '', visible: false, spacing_above: small, spacing_below: small,
        background: ''}
      name: flow_panel_2
      layout_properties: {grid_position: 'DSNZSN,WRZZUB'}
      components:
      - type: Label
        properties: {}
        name: label_multi_string
        layout_properties: {}
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: 'Ths button starts the very loose suggestions criteria
          for the new Nemo matching procedure "Disambiguator2"

          It will generate suggestions for the first 30 toponyms not linked to a position. ',
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: label_nemo
      layout_properties: {grid_position: 'BEZWDP,YPVRJK'}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Create Nemo suggestions, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_1
      layout_properties: {grid_position: 'BEZWDP,FHJHES'}
      event_bindings: {click: button_NemoListMaker_click}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Auto matching, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: label_title
    layout_properties: {slot: title}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  - type: Timer
    properties: {interval: 0}
    name: timer_1
    event_bindings: {tick: timer_1_tick}
  code: "from ._anvil_designer import Auto_matcherTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom time import time\nfrom time\
    \ import mktime\nfrom datetime import datetime\n\nclass Auto_matcher(Auto_matcherTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n    self.source = None\n    self.update_source_dropdown()\n\
    \    \n    tasks = anvil.server.call('get_existing_matcher')\n    if len(tasks)\
    \ > 0:\n      # keep track of latest task\n      self.task = tasks[-1]\n     \
    \ \n      self.timer_1.interval = 1\n      \n      self.flow_panel_1.visible =\
    \ True\n      self.flow_panel_2.visible = True\n      \n      # getting start\
    \ time\n#       dt = datetime.strptime([:-6],\n#                             '%Y-%m-%d\
    \ %H:%M:%S.%f')\n      tt = datetime.timetuple(self.task.get_start_time())\n \
    \     self.t0 = mktime(tt)\n    \n  def update_source_dropdown(self):\n    options\
    \ = [(row['name'], row['comment'], row['year']) for row in app_tables.sources.search()]\n\
    \    self.drop_down_source.items = [f'{name} ; {title} ; {year}' for name, title,\
    \ year in options]\n\n  def drop_down_source_change(self, **event_args):\n   \
    \ \"\"\"This method is called when an item is selected\"\"\"\n    selected = self.drop_down_source.selected_value\n\
    \    if selected is None:\n      self.source = None\n    else:\n      self.source\
    \ = selected.split(';')[0].strip()\n\n  def button_run_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    self.timer_1.interval\
    \ = 1\n    self.flow_panel_1.visible = True\n    self.flow_panel_2.visible = True\n\
    \    self.task = anvil.server.call('start_matcher', self.source)\n    self.t0\
    \ = time()\n    self.rich_status.content=('__Currently Running__')\n    \n  def\
    \ timer_1_tick(self, **event_args):\n    \"\"\"This method is called Every [interval]\
    \ seconds. Does not trigger if [interval] is 0.\"\"\"\n    \n    with anvil.server.no_loading_indicator:\n\
    \      try:\n        state = self.task.get_state()\n        if state is None:\n\
    \          raise AttributeError\n      except AttributeError:\n        self.timer_1.interval\
    \ = 0\n        return\n      self.rich_status.content=('__Currently Running__')\n\
    \      \n      iterator = state.get('iterator', 0)\n      self.label_iterator.text\
    \ = f'Iterator: {iterator}'\n      last = state.get('last', 0)\n      self.label_last.text\
    \ = f'Last: {last}'\n      mstr = state.get('multi_string')\n      self.label_multi_string.text\
    \ = f'Last match found: {mstr}'\n      \n#       optlen = state.get('optlen',\
    \ 0)\n#       self.label_optlen.text = f'Oplen: {optlen}'\n      \n      prev_last\
    \ = state.get('prev_last', 0)\n      self.label_prev_last.text = f'Prev last:\
    \ {prev_last}'\n      round_counter = state.get('round', 0)\n      self.label_round.text\
    \ = f'Round: {round_counter}'\n      try:\n        duration = int(time() - self.t0)\n\
    \        self.label_time.text = f'Duration: {duration}s'\n      except Exception\
    \ as e:\n        self.label_time.text = self.t0\n      if not self.task.is_running():\n\
    \        self.timer_1.interval = 0\n        self.rich_status.content = '__Finished__'\
    \    \n\n  def button_kill_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the button is clicked\"\"\"\n    anvil.server.call('kill_matcher',\
    \ self.task)\n\n  def button_NemoListMaker_click(self, **event_args):\n    \"\"\
    \"This method is called when the button is clicked\"\"\"\n    anvil.server.call('start_nemo_list')\n\
    \    \n\n\n  \n  \n\n"
  class_name: Adding.Auto_matcher
  id: TFAXNXE6PUYSTAQ644H5B2LRM7ZXEP3J
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{"XXRMGM":20,"FNSRSF":40}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: Label
      properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: 'Select a source:', font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: label_1
      layout_properties: {grid_position: 'ULXJNI,XXRMGM'}
    - type: DropDown
      properties:
        role: null
        align: full
        tooltip: ''
        placeholder: Pick a source
        border: ''
        enabled: true
        foreground: ''
        items: []
        visible: true
        font_size: null
        font: ''
        spacing_above: small
        spacing_below: small
        italic: false
        background: ''
        bold: false
        underline: false
        include_placeholder: true
      name: drop_down_source
      layout_properties: {grid_position: 'ULXJNI,FNSRSF'}
      event_bindings: {change: drop_down_source_change}
    - type: TextBox
      properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: New source name (7-10char - unique and identifiable),
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
        background: '', bold: false, underline: false}
      name: text_box_source_name
      layout_properties: {grid_position: 'RUJGLJ,ZDXIYU'}
      event_bindings: {pressed_enter: text_box_pressed_enter}
    - type: TextBox
      properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: New source descriptor,
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
        background: '', bold: false, underline: false}
      name: text_box_source_title
      layout_properties: {grid_position: 'RUJGLJ,VSIUOA'}
      event_bindings: {pressed_enter: text_box_pressed_enter}
    - type: TextBox
      properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: New source year,
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
        background: '', bold: false, underline: false}
      name: text_box_source_year
      layout_properties: {grid_position: 'RUJGLJ,EYEODV'}
      event_bindings: {pressed_enter: text_box_pressed_enter}
    - type: RichText
      properties: {role: null, align: left, tooltip: '', enable_slots: true, border: '',
        foreground: '', visible: true, font_size: null, content: 'Press <Enter> to
          add a source record.


          __Location formatting guidelines:__

          - One location per line

          - Enter the location name as is, no need to modify

          - Use semicolon to enter language and position  (if known)', font: '', spacing_above: small,
        spacing_below: small, data: null, background: '', format: markdown}
      name: rich_text_explanation
      layout_properties: {grid_position: 'RUPDCD,AYFQQP'}
    - type: TextArea
      properties: {role: null, align: left, height: 184, tooltip: '', placeholder: location_name; language; position,
        border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
        auto_expand: false, font: '', spacing_above: small, spacing_below: small,
        italic: false, background: '', bold: false, underline: false}
      name: text_area_locations
      layout_properties: {grid_position: 'LIYBFO,DGRJLE'}
      event_bindings: {}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Add locations, font_size: null, font: '',
        spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_push
      layout_properties: {grid_position: 'KIZKRK,STZTOT'}
      event_bindings: {click: button_push_click}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Add locations and go to matching, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_push_match
      layout_properties: {grid_position: 'KIZKRK,FNBGCQ'}
      event_bindings: {click: button_push_match_click}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: 'Adding new toponyms

        ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: title
    layout_properties: {slot: title}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  code: "from ._anvil_designer import New_locationsTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom collections import Counter\n\
    from ...Browser_package.Browser import update_sources\n\nclass New_locations(New_locationsTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    self.source = ''  \n  \n    self.text_box_source_name.tooltip\
    \ = 'New source name should be 7-10 characters long, unique and identifiable.\
    \ \\n'\\\n      'For example, if you are using a series of five books by an an\
    \ author you could use: Author0 - Author4 '\\\n      'Though it would probably\
    \ be preferable to include the year: AuthorX0 - AuthorX4 , assumimg that the books\
    \ '\\\n    'were published in five consecutive years starting with X0 -- if they\
    \ are published in the same year, perhaps '\\\n    'incorporating the month or\
    \ quarter might be better. \\n'\\\n    'Ideally it is possible to find a 7-10\
    \ characters long shorthand that makes each source unique, but '\\\n    'still\
    \ containing enough information that someone even vaguely familiar with the data\
    \ could instantly '\\\n    'distinguish between distinct sources.'    \n\n   \
    \ \n    # update table\n    update_sources()\n\n    # Any code you write here\
    \ will run when the form opens.\n    self.update_source_dropdown()\n    \n   \
    \ \n  def update_source_dropdown(self):\n    options = [(row['name'], row['comment'],\
    \ row['year']) for row in app_tables.sources.search()]\n    self.drop_down_source.items\
    \ = [f'{name} ; {title} ; {year}' for name, title, year in options]\n    \n  \
    \  \n  def text_box_pressed_enter(self, **event_args):\n    \"\"\"This method\
    \ is called when the user presses Enter in this text box\"\"\"\n    \n    #first\
    \ we need to check that the values confirm to the standards:\n    self.button_push.enabled\
    \ = False\n    \n    # dealing only with lower case is better.\n    name = self.text_box_source_name.text.lower()\n\
    \    title = self.text_box_source_title.text\n    year = self.text_box_source_year.text\n\
    \    if len(name) < 7 or len(name) > 10:\n      alert('Please use a name that\
    \ is  7-10 characters long.')\n    elif not name.isalnum():\n      alert('Please\
    \ stick to alphanumeric characters (a-z0-9).')\n    elif len(app_tables.sources.search(name=name))\
    \ > 0:\n      alert('Please enter a unique name, this one is already in use')\n\
    \    elif len(year) != 4 or not year.isdigit():\n      alert('There is an error\
    \ int he year\\'s formatting:'\n            'it needs to be four digits.')\n \
    \   else:  \n      \n      # if everything passed we add this source to db, update\
    \ table, update dropdown and select it from dropdown.\n      \n      anvil.server.call('add_source',\n\
    \                        name.lower(),\n                        title,\n     \
    \                   year)\n      \n      # update table\n      update_sources()\n\
    \      \n      # update dropdown\n      self.update_source_dropdown()\n      self.source\
    \ = name.lower()\n      \n      # set dropdown to the new value\n      self.drop_down_source.selected_value=\
    \ f'{name} ; {title} ; {year}'\n      # activate button\n      self.button_push.enabled\
    \ = True\n      \n      #emptying the fields\n      self.text_box_source_name.text\
    \ = ''\n      self.text_box_source_title.text = ''\n      self.text_box_source_year.text\
    \ = ''\n      \n  def button_push_match_click(self, **event_args):\n    \"\"\"\
    This method is called when the button is clicked\"\"\"\n    if self.button_push_click():\n\
    \      open_form('Adding.Auto_matcher')\n\n      \n  def button_push_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    \n    # first we get the selected source\n\n    source = self.drop_down_source.selected_value\n\
    \    if source is None:\n      alert('Please select a valid source')\n      return\
    \ False\n    \n    sure = confirm(f'You are about to add the entered locations\
    \ to '\n                   f'the database linked to the following source: {source}')\n\
    \    if not sure:\n      return False\n    \n    # if sure we start parsing the\
    \ data.\n    area_rows = self.text_area_locations.text.split('\\n')\n    starting_len\
    \ = len(area_rows)\n    \n    names = {row.split(';')[0].strip() for row in area_rows}\n\
    \    names_len = len(names)\n    \n    if starting_len != names_len:\n#      \
    \ alert(f'There are duplicated names in the data')\n      alert(f'Out of the {starting_len}\
    \ entered {names_len} were recorded into the database'\n           ' (after removing\
    \ duplicates)')\n      c = Counter(names)\n      s = str(c.most_common(1))\n \
    \     alert(s)\n      return False\n    \n    location_list = []\n    for row\
    \ in area_rows:\n      name = ''\n      position = None\n      language = None\n\
    \  \n      for i, data in enumerate(row.split(';')):\n        data = data.strip()\n\
    \        if i == 0:\n          name = data\n        elif i == 1:\n          for\
    \ langrow in app_tables.languages.search(language_short=data):\n            language\
    \ = langrow['language_short']\n            break\n          if language is None:\n\
    \            for langrow in app_tables.languages.search(language=data):\n    \
    \          language = langrow['language_short']\n              break\n       \
    \ elif i == 2:\n          position = data\n          \n#       if name == '':\n\
    #         alert(f'Empty row found, please correct.')\n#         return\n    \n\
    \      location_list.append((name, language, position))\n      \n    # adding\
    \ names to database\n    result = anvil.server.call('add_toponym', self.source,\
    \ location_list)\n      \n    if type(result) is str:\n      alert(result)\n \
    \     return False\n    else:\n      alert(f'Added {result}/{starting_len} locations\
    \ to table')\n      self.text_area_locations.text = ''\n      self.drop_down_source.selected_value\
    \ = None\n      self.button_push.enabled = False\n      return True\n\n\n  def\
    \ drop_down_source_change(self, **event_args):\n    \"\"\"This method is called\
    \ when an item is selected\"\"\"\n    selected = self.drop_down_source.selected_value\n\
    \    if self.source is not None:\n      self.source = selected.split(';')[0].strip()\n\
    \      self.button_push.enabled = True\n\n  \n"
  class_name: Adding.New_locations
  id: 5SRJ4T5SQH2B2GR5BKCGXGCCTXJMYXWP
- container:
    type: ColumnPanel
    properties: {col_widths: '{}'}
  components:
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Main page, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '{}',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_main
    layout_properties: {grid_position: 'BRSUQD,JKDJIS'}
    components: []
    event_bindings: {click: link_main_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Disambiguator, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_disambig
    layout_properties: {grid_position: 'ZIPENS,JMECNP'}
    event_bindings: {click: link_disambig_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Weak Matching, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_disambig_copy
    layout_properties:
      col_widths: {}
      grid_position: ZTLNXP,KLLBEQ
    event_bindings: {click: link_disambig2_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Add Toponyms, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_add_locations
    layout_properties:
      col_widths: {}
      grid_position: VJPUPU,ZNEZZJ
    event_bindings: {click: link_add_locations_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Auto Matching, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_auto_matcher
    layout_properties:
      col_widths: {}
      grid_position: ZNCPGO,OEUYCP
    event_bindings: {click: link_auto_matcher_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Export - TSV, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '{}',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_export
    layout_properties:
      col_widths: {}
      grid_position: CRZPRH,TVCMAS
    event_bindings: {click: link_export_click}
    components: []
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Cluster - TSV, font_size: null, wrap_on: mobile, font: '',
      col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '{}',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_cluster
    layout_properties:
      col_widths: {}
      grid_position: FNWIXF,VBOPPJ
    components: []
    event_bindings: {click: link_cluster_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Export by year- TSV, font_size: null, wrap_on: mobile,
      font: '', col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '{}',
      spacing_below: small, italic: false, background: '', bold: false, underline: false,
      icon: ''}
    name: link_export_by_year
    layout_properties:
      col_widths: {}
      grid_position: KNZNME,RLEDXD
    components: []
    event_bindings: {click: link_export_by_year_click}
  - type: Link
    properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Browser, font_size: null, wrap_on: mobile, font: '', col_spacing: medium,
      spacing_above: small, icon_align: left, col_widths: '', spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: link_browser
    layout_properties:
      col_widths: {}
      grid_position: MZYFCW,QVKGSR
    event_bindings: {click: link_browser_click}
  is_package: true
  code: "from ._anvil_designer import nav_barTemplate\nfrom anvil import *\nimport\
    \ anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query as q\n\
    from anvil.tables import app_tables\n\nclass nav_bar(nav_barTemplate):\n  def\
    \ __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n  def link_main_click(self, **event_args):\n   \
    \ \"\"\"This method is called when the link is clicked\"\"\"\n    \n    # going\
    \ to the __main__ page, wherever that ends up being.\n    open_form('Main_page')\n\
    \n  def link_disambig_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    \n    # opening the disambiguator\n    open_form('Disambiguator_package.Disambiguator')\n\
    \  def link_disambig2_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    \n    # opening the disambiguator\n    open_form('Disambiguator_package.Disambiguator2')\n\
    \n  def link_browser_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    open_form('Browser_package.Browser')\n\n\
    \  def link_add_locations_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the link is clicked\"\"\"\n    open_form('Adding.New_locations')\n\
    \n  def link_auto_matcher_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the link is clicked\"\"\"\n    open_form('Adding.Auto_matcher')\n\
    \n  def link_export_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    open_form('Export_package.Export')\n\n \
    \ def link_cluster_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    open_form('Export_package.Cluster_export')\n\
    \n  def link_export_by_year_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the link is clicked\"\"\"\n    open_form('Export_package.Export_by_year')\n\
    \n\n\n\n\n\n\n\n  \n  \n\n"
  class_name: nav_bar
  id: INRWOSBWBGG2XFVFECXFUL3P4DU4N3AW
- components:
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Browsing sources, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: Title
    layout_properties: {grid_position: 'IZHUIN,APPPSP'}
  - type: DataGrid
    properties:
      role: null
      columns:
      - {id: OSJSGP, title: Short Name, data_key: name}
      - {id: WJPCXG, title: Comment, data_key: comment}
      - {id: QKHWTU, title: Year, data_key: year}
      auto_header: true
      tooltip: ''
      border: ''
      foreground: ''
      rows_per_page: 20
      visible: true
      wrap_on: never
      show_page_controls: false
      spacing_above: small
      spacing_below: small
      background: ''
    name: data_grid_1
    layout_properties: {grid_position: 'IOLQZO,LQWYES'}
    components:
    - type: RepeatingPanel
      properties: {spacing_above: none, spacing_below: none, item_template: RowTemplate2}
      name: repeating_panel_sources
      layout_properties: {}
    - type: DataRowPanel
      properties: {}
      name: data_row_panel_1
      layout_properties: {}
      components:
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: New source name (7-10char),
          border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_name
        layout_properties: {column: OSJSGP}
        event_bindings: {}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: (title and misc information),
          border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_title
        layout_properties: {column: WJPCXG}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: (4 digits),
          border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_year
        layout_properties: {column: QKHWTU}
      - type: Button
        properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
          foreground: '', visible: true, text: Add source, font_size: null, font: '',
          spacing_above: small, icon_align: left, spacing_below: small, italic: false,
          background: '', bold: false, underline: false, icon: ''}
        name: button_add
        layout_properties: {column: ZTNTNZ}
        event_bindings: {click: button_add_click}
  container:
    type: ColumnPanel
    properties: {col_widths: '{}'}
  class_name: Browser_package.browser_sources
  code: "from ._anvil_designer import browser_sourcesTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\nfrom ..Browser_package import update_sources\n\
    \nclass browser_sources(browser_sourcesTemplate):\n  def __init__(self, **properties):\n\
    \    # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
    \n    \n    self.refresh()\n\n    self.set_event_handler('x-refresh', self.refresh)\n\
    \    \n    # Any code you write here will run when the form opens.\n    \n  def\
    \ refresh(self):\n    results = anvil.server.call('browser', 'sources')\n\n  \
    \  if results == 'Nothing found':\n      alert('Nothing found')\n    else:\n \
    \     self.repeating_panel_sources.items = results \n    \n  \n  def button_add_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    year = self.text_box_year.text\n    name = self.text_box_name.text\n\
    \    comment = self.text_box_title.text\n    \n    errors = '' \n    if not year.isdigit():\n\
    \      errors += f'\"{year}\" is not all digits. '\n    if len(name) == 0:\n \
    \     errors += 'A name is needed '\n    if len(title) == 0:\n      errors +=\
    \ 'A title is needed'\n      \n    if errors != '':\n      raise ValueError(errors)\n\
    \      \n    alert(f'{year}, {name}, {title}')\n    \n    anvil.server.call('add_source',\
    \ \n                     name,\n                     comment,\n              \
    \       year)\n    update_sources()\n    self.set_event_handler('x-refresh', self.refresh)\n\
    \    \n    \n    "
  id: TXVTNSM4M3FV77XFJA4SXY5DL4VH5KE6
- components:
  - type: RichText
    properties: {role: null, align: left, tooltip: '', enable_slots: true, border: '',
      foreground: '', visible: true, font_size: null, content: '### Position editor',
      font: '', spacing_above: small, spacing_below: small, data: null, background: '',
      format: markdown}
    name: rich_text_title
    layout_properties: {grid_position: 'TCGADQ,NJQEAY'}
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: column_panel_1
    layout_properties: {grid_position: 'JBXSUX,GSGHLA'}
    components:
    - type: LinearPanel
      properties: {}
      name: linear_panel_1
      layout_properties: {grid_position: 'LSIXMW,SBYHAS'}
      components:
      - type: Label
        properties: {}
        name: label_position_id
        layout_properties: {}
      - type: Label
        properties: {}
        name: label_source
        layout_properties: {}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: 'If the position
            was imported from GeoNames, the coordinates cannot be changed from here.',
          placeholder: '', border: '', enabled: true, foreground: '', visible: true,
          text: '', font_size: null, font: '', spacing_above: small, type: text, spacing_below: small,
          italic: false, background: '', bold: false, underline: false}
        name: text_box_latitude
        layout_properties: {}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: 'If the position
            was imported from GeoNames, the coordinates cannot be changed from here.',
          placeholder: '', border: '', enabled: true, foreground: '', visible: true,
          text: '', font_size: null, font: '', spacing_above: small, type: text, spacing_below: small,
          italic: false, background: '', bold: false, underline: false}
        name: text_box_longitude
        layout_properties: {}
    - type: TextArea
      properties: {height: 161.2167}
      name: text_area_comment
      layout_properties: {grid_position: 'LSIXMW,FEJEUH'}
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: column_panel_buttons
    layout_properties: {grid_position: 'HLNUPM,ABDCUR'}
    components:
    - type: Button
      properties: {role: null, align: center, tooltip: Record changes to coordinates or comment.,
        border: '', enabled: true, foreground: '', visible: true, text: update, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_update
      layout_properties: {grid_position: 'VQCJLW,ORUYMT'}
      event_bindings: {click: button_update_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Delete the position from the database.,
        border: '', enabled: true, foreground: '', visible: true, text: Delete position,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_delete
      layout_properties: {grid_position: 'VQCJLW,ELVRSA'}
      event_bindings: {click: button_delete_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Display the coordinates on the map.,
        border: '', enabled: true, foreground: '', visible: true, text: Map, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_map
      layout_properties: {grid_position: 'VQCJLW,MKYEXQ'}
      event_bindings: {click: button_map_click}
    - type: Button
      properties: {role: null, align: center, tooltip: Lists all the toponyms currently connected to the position.,
        border: '', enabled: true, foreground: '', visible: true, text: Get toponyms,
        font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: button_toponyms
      layout_properties: {grid_position: 'VQCJLW,NPDHMI'}
      event_bindings: {click: button_toponyms_click}
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: column_panel_3
    layout_properties: {grid_position: 'TMAOGQ,KHMBIV'}
    components:
    - type: GoogleMap
      properties: {scale_control: true, draggable_cursor: auto, heading: 0, fullscreen_control: true,
        dragging_cursor: auto, disable_double_click_zoom: false, height: 230, zoom: 2,
        map_type_control: true, gesture_handling: auto, street_view_control: true,
        visible: false, scroll_wheel: true, max_zoom: 18, draggable: true, min_zoom: 0,
        spacing_above: small, keyboard_shortcuts: true, spacing_below: small, background_color: '',
        rotate_control: true, zoom_control: true, disable_default_ui: false, clickable_icons: true}
      name: map_1
      layout_properties: {grid_position: 'NVJYPM,PZWQWA'}
    - type: RichText
      properties: {role: null, align: left, tooltip: '', enable_slots: true, border: '',
        foreground: '', visible: true, font_size: null, content: '', font: '', spacing_above: small,
        spacing_below: small, data: null, background: '', format: markdown}
      name: rich_text_toponyms
      layout_properties: {grid_position: 'NVJYPM,UQCHNF'}
  container:
    type: ColumnPanel
    properties: {col_widths: '{}'}
  class_name: Browser_package.edit_position
  code: "from ._anvil_designer import edit_positionTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\n\nclass edit_position(edit_positionTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n  def enabled(self, enabled, **event_args):\n\
    \    for component in self.get_components():\n      component.enable = enabled\n\
    \      component.visible = enabled\n      for c2 in component.get_components():\n\
    \        c2.enable = enabled\n        c2.visible = enabled\n    \n  def deactivate(self,\
    \ **event_args):\n    self.enabled(False)\n    self.label_position_id.text = 'No\
    \ position connected, go to Disambiguator or Nemo to resolve'\n\n    for component\
    \ in self.map_1.get_components():\n      component.remove_from_parent()\n    \
    \  del component\n      \n  def activate(self, **event_args):\n    self.enabled(True)\n\
    \n    \n  def refresh(self, item, **event_args):\n    # for the position editor\
    \ \n    if type(item) in (int, str):\n      # fetch data\n      pass\n  \n   \
    \ self.position_id = item['p_id']\n    if self.position_id is None:\n      return\
    \ self.deactivate()\n    \n    self.activate()\n  \n    self.latitude = item['lat']\n\
    \    self.longitude = item['lng']\n    self.comment = item['p_comment']\n    self.source\
    \ = item['p_source']\n    \n    self.label_position_id.text = self.position_id\n\
    \    self.label_source.text = self.source\n    \n    self.text_area_comment.text\
    \ = self.comment\n    \n    self.text_box_latitude.text = self.latitude\n    self.text_box_longitude.text\
    \ = self.longitude\n  \n    self.coords_editable = len(self.source) > 6\n    self.text_box_latitude.enabled\
    \ = self.coords_editable\n    self.text_box_longitude.enabled = self.coords_editable\n\
    \n  def button_update_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the button is clicked\"\"\"\n    latitude = self.text_box_latitude.text\n\
    \    latitude = float(latitude)\n    \n    longitude = self.text_box_longitude.text\n\
    \    longitude = float(longitude)\n    \n    comment = self.text_area_comment.text\n\
    \    \n    if latitude != self.latitude or longitude != longitude:\n      self.latitude\
    \ = latitude\n      self.longitude = longitude\n      server.call('change_coordinates',\
    \ self.position_id, latitude, longitude)\n\n    if comment != self.comment:\n\
    \      server.call('comment_position', comment, self.position_id)\n    \n\n  def\
    \ button_delete_click(self, **event_args):\n    \"\"\"This method is called when\
    \ the button is clicked\"\"\"\n    sure = confirm('You are about to delete the\
    \ position and all its seeded toponyms. '\n                   'Any manually added\
    \ toponyms connected to the position will require new matching')\n    if sure:\n\
    \      sure = confirm('Are you sure?\\nPlease make sure that you have mapped the\
    \ position and checked'\n                    'all its connected toponyms.')\n\
    \      if sure:\n        server.call('delete_position', self.position_id)\n  \
    \      self.deactivate()\n\n  def button_map_click(self, **event_args):\n    self.map_1.visible\
    \ = True\n    self.map_1.center = GoogleMap.LatLng(49.062915, 17.583981)\n   \
    \ self.map_1.zoom = 6\n    marker = GoogleMap.Marker(animation=GoogleMap.Animation.DROP,\n\
    \                                position=GoogleMap.LatLng(self.latitude, self.longitude),\n\
    \                                label=self.position_id)\n    self.map_1.add_component(marker)\n\
    \      \n  def button_toponyms_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    res = server.call('fetch_position_toponyms',\
    \ self.position_id)\n    self.rich_text_toponyms.content = '#### Toponyms\\n\\\
    n' + res\n    self.rich_text_toponyms.visible = True\n\n\n  \n  "
  id: 35SWVYVXR4N5MXNLO3KIRUCIDKYBVW6E
- components:
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Browsing positions, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: Title
    layout_properties: {grid_position: 'IZHUIN,APPPSP'}
  - type: DataGrid
    properties:
      role: null
      columns:
      - {id: ZTNTNZ, title: ID, data_key: id}
      - {id: OSJSGP, title: source, data_key: source}
      - {id: WJPCXG, title: abandoned, data_key: abandoned}
      - {id: QKHWTU, title: parentq, data_key: parentq}
      - {id: WBENZM, title: Parent name, data_key: parent_name}
      - {id: VYXMVZ, title: long, data_key: long}
      - {id: AUHIZT, title: lat, data_key: lat}
      auto_header: true
      tooltip: ''
      border: ''
      foreground: ''
      rows_per_page: 20
      visible: true
      wrap_on: never
      show_page_controls: true
      spacing_above: small
      spacing_below: small
      background: ''
    name: data_grid_positions
    layout_properties: {grid_position: 'IOLQZO,LQWYES'}
    components:
    - type: RepeatingPanel
      properties: {spacing_above: none, spacing_below: none, item_template: RowTemplate2}
      name: repeating_panel_1
      layout_properties: {}
  container:
    type: ColumnPanel
    properties: {col_widths: '{}'}
  class_name: Browser_package.browser_positions
  code: "from ._anvil_designer import browser_positionsTemplate\nfrom anvil import\
    \ *\nimport anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass browser_positions(browser_positionsTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n    results = anvil.server.call('browser', 'positions')\n\
    \    if results == 'Nothing found':\n      alert('Nothing found')\n    else:\n\
    \      self.repeating_panel_1.items = results \n    \n    "
  id: KBTR6KB6C46NGH5L3L4NDSJVKNNGNPQW
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components: []
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Browser, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: label_1
    layout_properties: {slot: title}
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: column_panel_1
    layout_properties: {slot: left-nav}
    components:
    - type: form:nav_bar
      properties: {}
      name: custom_1
      layout_properties: {grid_position: 'MBNRRN,WIFRQU'}
    - type: Link
      properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: Toponyms - WIP, font_size: null, wrap_on: mobile, font: '',
        col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: link_loc
      layout_properties: {grid_position: 'VEASZV,YKJQJS'}
      event_bindings: {click: link_loc_click}
    - type: Link
      properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: positions - WIP, font_size: null, wrap_on: mobile, font: '',
        col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: link_pos
      layout_properties: {grid_position: 'EZPCHH,BUCSCY'}
      event_bindings: {click: link_pos_click}
    - type: Link
      properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: sources, font_size: null, wrap_on: mobile, font: '',
        col_spacing: medium, spacing_above: small, icon_align: left, col_widths: '',
        spacing_below: small, italic: false, background: '', bold: false, underline: false,
        icon: ''}
      name: link_source
      layout_properties:
        col_widths: {}
        grid_position: DKPIYC,HQMXAQ
      event_bindings: {click: link_source_click}
    - type: Link
      properties: {role: null, url: '', align: left, tooltip: '', border: '', foreground: '',
        visible: true, text: Nemo, font_size: null, wrap_on: mobile, font: '', col_spacing: medium,
        spacing_above: small, icon_align: left, col_widths: '', spacing_below: small,
        italic: false, background: '', bold: false, underline: false, icon: ''}
      name: link_nemo
      layout_properties:
        col_widths: {}
        grid_position: TPGHWI,WQNLLG
      event_bindings: {click: link_nemo_click}
  code: "from ._anvil_designer import BrowserTemplate\nfrom anvil import *\nimport\
    \ anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query as q\n\
    from anvil.tables import app_tables\nfrom ...Browser_package import update_sources\n\
    from ...Browser_package import update_languages\n\nfrom ..browser_locations import\
    \ browser_locations\nfrom ..browser_positions import browser_positions\nfrom ..browser_sources\
    \ import browser_sources\nfrom ..browser_nemo import browser_nemo\n\nclass Browser(BrowserTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n    \n\n  def link_loc_click(self, **event_args):\n\
    \    \"\"\"This method is called when the link is clicked\"\"\"\n    self.content_panel.clear()\n\
    \    self.content_panel.add_component(browser_locations())\n\n  def link_pos_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the link is clicked\"\"\
    \"\n    self.content_panel.clear()\n    self.content_panel.add_component(browser_positions())\n\
    \n  def link_source_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    self.content_panel.clear()\n    self.content_panel.add_component(browser_sources())\n\
    \n  def link_nemo_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the link is clicked\"\"\"\n    self.content_panel.clear()\n    self.content_panel.add_component(browser_nemo())\n\
    \n    \n  def button_1_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the button is clicked\"\"\"\n    update_sources()\n    update_languages()\n\
    \    anvil.server.launch_background_task('placeholder_initiator')\n\n"
  class_name: Browser_package.Browser
  id: R5WPAUVE2372VKAD7IUMRMU4HK2ZG4CD
- components:
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Browsing Locations, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: title
    layout_properties: {grid_position: 'IZHUIN,APPPSP'}
  - type: GoogleMap
    properties: {height: 342}
    name: map_1
    layout_properties: {grid_position: 'EDQBBI,OGDCVB'}
    event_bindings: {rightclick: map_1_rightclick}
  - type: DropDown
    properties:
      role: null
      align: full
      tooltip: ''
      placeholder: Created location picker
      border: ''
      enabled: true
      foreground: ''
      items: []
      visible: true
      font_size: null
      font: ''
      spacing_above: small
      spacing_below: small
      italic: false
      background: ''
      bold: false
      underline: false
      include_placeholder: true
    name: drop_down_created
    layout_properties: {grid_position: 'EDQBBI,XSMWDT'}
    event_bindings: {change: drop_down_created_change}
  - type: DataGrid
    properties:
      role: null
      columns:
      - {id: ZTNTNZ, title: ID, data_key: id}
      - {id: OSJSGP, title: Name, data_key: name}
      - {id: WJPCXG, title: Language, data_key: language}
      - {id: QKHWTU, title: Source, data_key: source}
      - {id: WBENZM, title: Comment, data_key: comment, expand: false, width: 278}
      - {id: BNZFOW, title: Operations, data_key: operations}
      auto_header: true
      tooltip: ''
      border: ''
      foreground: ''
      rows_per_page: 30
      visible: true
      wrap_on: never
      show_page_controls: true
      spacing_above: small
      spacing_below: small
      background: ''
    name: data_grid_nemo
    layout_properties: {grid_position: 'IOLQZO,LQWYES', full_width_row: true}
    components:
    - type: RepeatingPanel
      properties: {role: null, tooltip: '', border: '', foreground: '', items: null,
        visible: true, spacing_above: none, spacing_below: none, item_template: RowTemplateNemo,
        background: ''}
      name: repeating_panel_1
      layout_properties: {}
  container:
    type: ColumnPanel
    properties: {col_widths: '{"OGDCVB":45,"XSMWDT":15}'}
  class_name: Browser_package.browser_nemo
  code: "from ._anvil_designer import browser_nemoTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nfrom ..Disambiguator_package.Disambiguator\
    \ import click_generator\n\nclass browser_nemo(browser_nemoTemplate):\n  def __init__(self,\
    \ **properties):\n    # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
    \    self.page = 1\n    \n    # Any code you write here will run when the form\
    \ opens.\n    \n    self.set_event_handler('x-refresh', self.refresh)\n\n    self.map_1.center\
    \ = GoogleMap.LatLng(49.062915, 17.583981)\n    self.map_1.zoom = 6\n\n    self.update_options()\n\
    \   \n    self.refresh()\n\n  def update_options(self, **event_args):\n\n#   \
    \  results = [('t_id', 'A name', 'M_something', 24,48)]*3\n    results = server.call('fetch_created_positions')\n\
    \    if len(results) == 0:\n      return False\n    \n    for component in self.map_1.get_components():\n\
    \      component.remove_from_parent()\n  \n    options = []\n#     alert(results)\n\
    \    for item in sorted(results, key=lambda x: x['position_id']):\n      t_id\
    \ = item['toponym_id']\n      name = item['name']\n      p_id = item['position_id']\n\
    \      lng = item['longitude']\n      lat = item['latitude']\n      options.append(f'{t_id}\
    \ : {name} : {p_id}')\n      marker = GoogleMap.Marker(animation=GoogleMap.Animation.DROP,\n\
    \                                position=GoogleMap.LatLng(lat, lng),\n      \
    \                          label=p_id)\n      label = f'{name} ({p_id})'\n   \
    \   marker.add_event_handler('click', click_generator(label))\n      self.map_1.add_component(marker)\n\
    \    \n    self.drop_down_created.items = options\n    \n  def refresh(self, **event_args):\
    \        \n  \n    results = anvil.server.call('browser', 'nemo', {}, self.page)\n\
    \    if results == 'Nothing found':\n      alert('Nothing found')\n    else:\n\
    \      self.repeating_panel_1.items = results \n      self.title.text = f'Browsing\
    \ {len(results)} unconnected toponyms '\n\n  def map_1_rightclick(self, lat_lng,\
    \ **event_args):\n    \"\"\"This method is called for a right-click on the geometry.\"\
    \"\"\n    self.lat = lat_lng.lat()\n    self.lng = lat_lng.lng()\n        \n \
    \   for component in self.repeating_panel_1.get_components():\n      component.button_create.enabled\
    \ = True\n      component.button_create.text = f'Create and choose: ({self.lat:.6f},\
    \  {self.lng:.6f})'\n\n    \n#     server.call('make_position_for_toponym', toponym_id,\
    \ self.lat, self.lng, source)\n    \n\n  def drop_down_created_change(self, **event_args):\n\
    \    \"\"\"This method is called when an item is selected\"\"\"\n    # enable\
    \ all \"choose option buttons\"\n    for component in self.repeating_panel_1.get_components():\n\
    \      component.button_select_created.enabled = True\n\n"
  id: VKAGTMK5NLI7ECS2TDW4ZDZKN7ZNXN6J
- container:
    type: ColumnPanel
    properties: {col_widths: '{}'}
  components:
  - type: RichText
    properties: {role: null, align: left, tooltip: '', enable_slots: true, border: '',
      foreground: '', visible: true, font_size: null, content: '## Toponym browsing
        and editing', font: '', spacing_above: small, spacing_below: small, data: null,
      background: '', format: markdown}
    name: rich_text_1
    layout_properties: {grid_position: 'GYDHPA,ENLFJL'}
  - type: DataGrid
    properties:
      role: null
      columns:
      - {id: ZTNTNZ, title: Toponym ID, data_key: id}
      - {id: OSJSGP, title: Toponym, data_key: name}
      - {id: QKHWTU, title: Source, data_key: source}
      - {id: WBENZM, title: Position, data_key: p_id}
      - {id: VYXMVZ, title: Comment, data_key: comment, width: '300', expand: false}
      - {id: EHIAOM, title: Position Source, data_key: p_source}
      - {id: XETAIV, title: Buttons, data_key: ''}
      - {id: YWAPDR, title: Latitude, data_key: lat}
      - {id: PTQHMH, title: Longitude, data_key: lng}
      - {id: YNSDKN, title: Position Comment, data_key: p_comment}
      auto_header: true
      tooltip: ''
      border: ''
      foreground: ''
      rows_per_page: 20
      visible: true
      wrap_on: never
      show_page_controls: false
      spacing_above: small
      spacing_below: small
      background: ''
    name: data_grid_1
    layout_properties: {grid_position: 'IOLQZO,LQWYES', full_width_row: true}
    components:
    - type: DataRowPanel
      properties: {}
      name: data_row_panel_1
      layout_properties: {}
      components:
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: Enter a toponym ID to restrict the search.,
          placeholder: Toponym ID, border: '', enabled: true, foreground: '', visible: true,
          text: '', font_size: null, font: '', spacing_above: small, type: text, spacing_below: small,
          italic: false, background: '', bold: false, underline: false}
        name: text_box_id
        layout_properties: {column: ZTNTNZ}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: 'Filter topnyms
            on their ascii name using SQL patterns: \n _ - matches any 1 character\n
            % - matches any string of characters\nSo if you want to search for "Česká"
            you could enter Ceska or C_eska or Cesk%', placeholder: Pattern, border: '',
          enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_name
        layout_properties: {column: OSJSGP}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: Position ID,
          border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_position
        layout_properties: {column: WBENZM}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: '', placeholder: Comment - Does nothing yet,
          border: '', enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_method
        layout_properties: {column: VYXMVZ}
      - type: DropDown
        properties:
          role: null
          align: full
          tooltip: Restrict the browsing to a single source
          placeholder: Source
          border: ''
          enabled: true
          foreground: ''
          items: []
          visible: true
          font_size: null
          font: ''
          spacing_above: small
          spacing_below: small
          italic: false
          background: ''
          bold: false
          underline: false
          include_placeholder: true
        name: drop_down_source
        layout_properties: {column: QKHWTU}
      - type: Button
        properties: {role: null, align: center, tooltip: Initiate the entered filters and refill the table with new search results.,
          border: '', enabled: true, foreground: '', visible: true, text: 'Search
            & Filter

            ', font_size: null, font: '', spacing_above: small, icon_align: left,
          spacing_below: small, italic: false, background: '', bold: false, underline: false,
          icon: ''}
        name: button_filter
        layout_properties: {slot: footer, column: XETAIV}
        event_bindings: {click: button_filter_click}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: 'A string
            of characters or pattern to filter position sources by: eg: "59" would
            match to "nagel1959" and "12359krs"', placeholder: Position source, border: '',
          enabled: true, foreground: '', visible: true, text: '', font_size: null,
          font: '', spacing_above: small, type: text, spacing_below: small, italic: false,
          background: '', bold: false, underline: false}
        name: text_box_p_source
        layout_properties: {column: EHIAOM}
    - type: RepeatingPanel
      properties: {role: null, tooltip: '', border: '', foreground: '', items: null,
        visible: true, spacing_above: none, spacing_below: none, item_template: RowTemplateBrowseToponym,
        background: ''}
      name: repeating_panel_1
      layout_properties: {}
    - type: ColumnPanel
      properties: {col_widths: '{}'}
      name: column_panel_navigation
      layout_properties: {slot: footer}
      components:
      - type: Button
        properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
          foreground: '', visible: true, text: '|<

            ', font_size: null, font: '', spacing_above: small, icon_align: left,
          spacing_below: small, italic: false, background: '', bold: false, underline: false,
          icon: ''}
        name: button_nav_first
        layout_properties: {grid_position: 'NHRTYJ,EKWWSB'}
        event_bindings: {click: button_nav_first_click}
      - type: Button
        properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
          foreground: '', visible: true, text: '<

            ', font_size: null, font: '', spacing_above: small, icon_align: left,
          spacing_below: small, italic: false, background: '', bold: false, underline: false,
          icon: ''}
        name: button_nav_prev
        layout_properties: {grid_position: 'NHRTYJ,AVNBUT'}
        event_bindings: {click: button_nav_prev_click}
      - type: TextBox
        properties: {}
        name: text_box_n
        layout_properties: {grid_position: 'NHRTYJ,EYRGLZ'}
        event_bindings: {pressed_enter: text_box_n_pressed_enter}
      - type: Label
        properties: {}
        name: label_N
        layout_properties: {grid_position: 'NHRTYJ,DABZCX'}
      - type: Button
        properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
          foreground: '', visible: true, text: '>', font_size: null, font: '', spacing_above: small,
          icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
          underline: false, icon: ''}
        name: button_nav_next
        layout_properties: {grid_position: 'NHRTYJ,EBHNCT'}
        event_bindings: {click: button_nav_next_click}
      - type: Button
        properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
          foreground: '', visible: true, text: '>|', font_size: null, font: '', spacing_above: small,
          icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
          underline: false, icon: ''}
        name: button_nav_last
        layout_properties: {grid_position: 'NHRTYJ,QDQXGW'}
        event_bindings: {click: button_nav_last_click}
  - type: form:Browser_package.edit_toponym
    properties: {}
    name: custom_toponym_editor
    layout_properties: {grid_position: 'XSBMSS,FJWEZO'}
    data_bindings: []
  class_name: Browser_package.browser_locations
  code: "from ._anvil_designer import browser_locationsTemplate\nfrom anvil import\
    \ *\nimport anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass browser_locations(browser_locationsTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n    # ferching the language and source data\n  \
    \  self.drop_down_source.items = [row['name'] for row in app_tables.sources.search()]\n\
    \    \n    columns = [c for c in self.data_grid_1.columns if c['title'] in ('Longitude',\
    \ 'Latitude', 'Position Comment')]\n    self.hidden_columns = []\n    for c in\
    \ columns:\n      self.hidden_columns.append(c)\n      self.data_grid_1.columns.remove(c)\n\
    \      self.data_grid_1.columns = self.data_grid_1.columns\n    \n    self.filters\
    \ = None\n    \n    self.search()\n  \n  def search(self, **event_args):\n\n \
    \   if self.filters is None:\n      self.filters={'source': 'All', 'name': 'edit',\
    \ 'toponym_id': '', 'position_fk': '', 'p_source':''}\n        \n    results =\
    \ anvil.server.call('browser', 'toponym', self.filters)\n    \n    if results\
    \ == 'Nothing found':\n      alert('Nothing found, leaving table as is.')\n  \
    \    return False\n    else:\n      self.t_ids = results\n\n    self.n = 1\n \
    \   self.N = len(self.t_ids)//20+1\n    \n    self.text_box_n.text = str(self.n)\n\
    \    self.label_N.text = str(self.N)\n           \n    self.refresh()\n      \n\
    \  def refresh(self, **event_args):\n    # set filters\n  \n    items = server.call('toponym_data',\
    \ self.t_ids[(self.n-1)*20:self.n*20])\n    self.repeating_panel_1.items = items\
    \  \n    self.text_box_n.text = self.n\n    \n  \n  def update_editor(self, item,\
    \ **event_args):\n    self.custom_toponym_editor.update(item)      \n\n  \n  def\
    \ button_filter_click(self, **event_args):\n    \"\"\"This method is called when\
    \ the button is clicked\"\"\"\n    # first we check if the filters are active\n\
    \    source = self.drop_down_source.selected_value\n    if source is None or len(source)\
    \ <= 6:\n      source = 'All'\n    p_source = self.text_box_p_source.text\n  \
    \  if p_source is None:\n      p_source = ''\n    \n    # set the filters\n  \
    \  self.filters = {'toponym_id': self.text_box_id.text,\n                    'source':\
    \ source,\n                    'name': self.text_box_name.text,\n            \
    \        'position_fk': self.text_box_position.text,\n                    'p_source':\
    \ p_source}\n    \n    # update the list of toponym ids and the list with this\
    \ filter\n    self.search()\n    \n\n  def button_nav_first_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    if self.n\
    \ > 1:\n      self.n = 1\n      self.refresh()\n\n  def button_nav_prev_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    if self.n > 1:\n      self.n -= 1\n      self.refresh()\n\n  def text_box_n_pressed_enter(self,\
    \ **event_args):\n    \"\"\"This method is called when the user presses Enter\
    \ in this text box\"\"\"\n    n = int(self.text_box_n.text)\n    if n != self.n:\n\
    \      self.n = n\n      self.refresh()\n    \n  def button_nav_next_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    if self.n < self.N:\n      self.n += 1\n      self.refresh()\n    \n\
    \  def button_nav_last_click(self, **event_args):\n    \"\"\"This method is called\
    \ when the button is clicked\"\"\"\n    if self.n < self.N:\n      self.n = self.N\n\
    \      self.refresh()\n\n\n\n\n\n\n\n"
  id: 7Z2Q24K5RS2UEZ2YCIGPT2SVTNN4XYXI
- container:
    type: ColumnPanel
    properties: {col_widths: '{}'}
  components:
  - type: RichText
    properties: {role: null, align: left, tooltip: '', enable_slots: true, border: '',
      foreground: '', visible: true, font_size: null, content: '### Toponym editor',
      font: '', spacing_above: small, spacing_below: small, data: null, background: '',
      format: markdown}
    name: rich_text_title
    layout_properties: {grid_position: 'LQBRMY,PRWYGQ'}
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: column_panel_1
    layout_properties: {grid_position: 'PKHEWS,XKJHAL'}
    components:
    - type: LinearPanel
      properties: {}
      name: linear_panel_1
      layout_properties: {grid_position: 'YKLSGU,MHVRVF'}
      components:
      - type: Label
        properties: {}
        name: label_toponym_id
        layout_properties: {}
      - type: Label
        properties: {}
        name: label_source
        layout_properties: {}
      - type: TextBox
        properties: {role: null, align: left, hide_text: false, tooltip: Change the name and press <enter> to record any changes to the toponym.,
          placeholder: '', border: '', enabled: true, foreground: '', visible: true,
          text: '', font_size: null, font: '', spacing_above: small, type: text, spacing_below: small,
          italic: false, background: '', bold: false, underline: false}
        name: text_box_name
        layout_properties: {}
        event_bindings: {pressed_enter: text_box_name_pressed_enter}
    - type: TextArea
      properties: {height: 116.2167}
      name: text_area_comment
      layout_properties: {grid_position: 'YKLSGU,FGFZLL'}
      event_bindings: {focus: text_area_comment_focus}
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: column_panel_2
    layout_properties: {grid_position: 'DCUPRR,CCEIXE'}
    components:
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Disconnect from position, font_size: null,
        font: '', spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_disconnect
      layout_properties: {grid_position: 'TANJUC,AGNBEU'}
      event_bindings: {click: button_disconnect_click}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Delete toponym, font_size: null, font: '',
        spacing_above: small, icon_align: left, spacing_below: small, italic: false,
        background: '', bold: false, underline: false, icon: ''}
      name: button_delete
      layout_properties: {grid_position: 'TANJUC,OGVHAK'}
      event_bindings: {click: button_delete_click}
    - type: Button
      properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
        foreground: '', visible: true, text: Comment, font_size: null, font: '', spacing_above: small,
        icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
        underline: false, icon: ''}
      name: button_comment
      layout_properties: {grid_position: 'TANJUC,KRDSNP'}
      event_bindings: {click: button_comment_click}
  - type: form:Browser_package.edit_position
    properties: {}
    name: custom_edit_position
    layout_properties: {grid_position: 'HGDHPW,TFUXIZ'}
  is_package: true
  code: "from ._anvil_designer import edit_toponymTemplate\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass edit_toponym(edit_toponymTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n    \n  def enable(self, enabled, **event_args):\n\
    \    for component in self.get_components():\n      component.enable = enabled\n\
    \      component.visible = enabled\n      for c2 in component.get_components():\n\
    \        c2.enable = enabled\n        c2.visible = enabled\n\n  def deactivate(self,\
    \ **event_args):\n    self.enable(False)\n    self.label_toponym_id.text = 'No\
    \ toponym selected'\n    \n  def activate(self, **event_args):\n    self.enable(True)\
    \    \n\n  def refresh(self, item, **event_args):\n    if type(item) in (str,\
    \ int):\n      result = call.server('toponym_data', [item])\n      if type(result)\
    \ is str:\n        alert(str)\n        return self.deactivate()\n      item =\
    \ result[0]\n    self.activate()\n      \n    self.toponym_id = item['id']\n \
    \   self.label_toponym_id.text = self.toponym_id\n    self.toponym = item['name']\n\
    \    self.text_box_name.text = self.toponym\n\n    self.source = item['source']\n\
    \    self.label_source.text = f'Source: {self.source}'\n    \n    self.text_area_comment.text\
    \ = item['comment']\n    \n    self.custom_edit_position.refresh(item)\n    \n\
    \n  def button_disconnect_click(self, **event_args):\n    \"\"\"This method is\
    \ called when the button is clicked\"\"\"\n    if self.toponym_id is not None\
    \ and self.custom_edit_position.position_id is not None:\n      server.call('disconnect_position',\
    \ self.toponym_id, self.custom_edit_position.position_id)\n      self.custom_edit_position.deactivate()\n\
    \      \n  def button_delete_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    sure = confirm('You are about\
    \ to remove the toponym completely from the database.\\nThis action is irrevocable,\
    \ are you sure?')\n    if sure:\n      sure = confirm('Really sure? If you also\
    \ want to delete the linked position, do so first. And remember to check for other\
    \ toponyms linked to it.')\n      if sure:\n        server.call('delete_toponym',\
    \ self.toponym_id)\n        self.deactivate()\n    \n  def text_box_name_pressed_enter(self,\
    \ **event_args):\n    \"\"\"This method is called when the user presses Enter\
    \ in this text box\"\"\"\n    if self.toponym != self.text_box_name.text.strip():\n\
    \      server.call('rename_toponym', self.toponym_id, self.text_box_name.text.strip())\n\
    \      self.toponym = self.text_box_name.text.strip()\n\n  def text_area_comment_focus(self,\
    \ **event_args):\n    \"\"\"This method is called when the text area gets focus\"\
    \"\"\n    self.text_area_comment.text = ''\n\n  def button_comment_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    if self.comment != self.text_area_comment.text:\n      server.call('comment_toponym',\
    \ self.toponym_id, self.text_area_comment.text)\n\n\n\n\n\n\n\n\n"
  class_name: Browser_package.edit_toponym
  id: DED3ONC5WAZ7MP5SGAAMBHOUXF3JUBXZ
- components:
  - type: Button
    properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
      foreground: '', visible: true, text: 'Edit

        ', font_size: null, font: '', spacing_above: small, icon_align: left, spacing_below: small,
      italic: false, background: '', bold: false, underline: false, icon: ''}
    name: button_edit
    layout_properties: {column: XETAIV}
    event_bindings: {click: button_edit_click}
  container:
    type: DataRowPanel
    properties: {role: null, align: left, tooltip: '', border: solid gray 0.5px, foreground: '',
      auto_display_data: true, visible: true, font_size: null, font: '', spacing_above: none,
      spacing_below: none, italic: false, background: '', bold: false, underline: false}
  class_name: RowTemplateBrowseToponym
  code: "from ._anvil_designer import RowTemplateBrowseToponymTemplate\nfrom anvil\
    \ import *\nimport anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nimport webbrowser\n\nclass RowTemplateBrowseToponym(RowTemplateBrowseToponymTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n  def button_select_click(self, **event_args):\n\
    \    \"\"\"This method is called when the button is clicked\"\"\"\n    \n    alert(self.item['name'])\n\
    \    url = 'https://www.wikidata.org/w/index.php?search='\n    url += self.item['name']\n\
    \    webbrowser.open(url)\n#     https://www.wikidata.org/w/index.php?search=\n\
    \    pass\n\n  def button_1_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    pass\n\n  def button_edit_click(self,\
    \ **event_args):\n    \"\"\"This method is called when the button is clicked\"\
    \"\"\n    pass\n    \n    self.parent.parent.parent.custom_toponym_editor.refresh(item=self.item)\n\
    \  "
  id: BWP6LAABDDCUK7J7AYZOKYLO2JBTKAOZ
- container: {type: DataRowPanel}
  components:
  - type: CheckBox
    properties: {role: null, align: left, tooltip: '', border: '', enabled: true,
      foreground: '', allow_indeterminate: false, visible: true, text: Include, font_size: null,
      font: '', spacing_above: small, spacing_below: small, italic: false, background: '',
      bold: false, checked: true, underline: false}
    name: check_box_1
    layout_properties: {column: MNKYQI}
    data_bindings:
    - {property: checked, code: 'self.item[''include'']', writeback: true}
    event_bindings: {change: check_box_1_change}
  is_package: true
  code: "from ._anvil_designer import RowTemplate4Template\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass RowTemplate4(RowTemplate4Template):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n\n  def check_box_1_change(self, **event_args):\n\
    \    \"\"\"This method is called when this checkbox is checked or unchecked\"\"\
    \"\n    val = self.check_box_1.checked\n    self.item['include'] = val\n\n"
  class_name: RowTemplate4
  id: 5MNEUD5HWSAKRQ6JFSSDFKJFNK2IT7XI
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: RichText
      properties: {role: null, align: left, tooltip: '', enable_slots: true, border: '',
        foreground: '', visible: true, font_size: null, content: "### Welcome to the\
          \ main page!  \n\nThere is not much to see here, but if you press the three\
          \ white lines in the top left corner, you can show/hide the navivgation\
          \ pane.\n\n\n__Main Page__ - takes you back here.\n\n__Disambiguator__ -\
          \ Is the heart of this GUI: where you can review the the toponyms with multiple\
          \ candidates for matching.\n\n__Weak Matching__ - Fills a similar role to\
          \ the *Disambiguator*, but here the user is presented with the ten *best*\
          \ matches. None of which were similar enough to be automatically matched\
          \ to the toponyms.\n\n\n__Add Toponyms__ - lets you add (toponyms) to the\
          \ datasse, these need to be linked to a source (e.g: the guide book they\
          \ came from)\n\n__Auto Matching__ - Is where you can initialise the automatic\
          \ matching process, either for toponyms from a particular source or for\
          \ all unmatched toponyms. After it is initialised, it runs in the background.\n\
          \n__Browser__ (WIP) - Contains some interfaces for browsing the various\
          \ data tables:\n\n- locations\n- positions\n- sources\n- Nemos - the toponyms\
          \ without a single candidate for matching. \n\n__Export__ - Export data\
          \ from the database to a tab separated value format. Currently the export\
          \ is very simple: select a source (or all) and the output will be placed\
          \ into a TextArea from which you can then copy - paste it into a file.\n",
        font: '', spacing_above: small, spacing_below: small, data: null, background: '',
        format: markdown}
      name: rich_text_main
      layout_properties: {grid_position: 'KTQLTC,SWDYWG'}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: CITADEL, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: label_title
    layout_properties: {slot: title}
  - type: form:nav_bar
    properties: {}
    name: custom_1
    layout_properties: {slot: left-nav}
  code: "from ._anvil_designer import Main_pageTemplate\nfrom anvil import *\nimport\
    \ anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query as q\n\
    from anvil.tables import app_tables\n\nclass Main_page(Main_pageTemplate):\n \
    \ def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens.\n    \n"
  class_name: Main_page
  id: HBPZRETTF4LEO4PO2PFWJZWWYOVW3PB6
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html'}
  components:
  - type: ColumnPanel
    properties: {col_widths: '{}'}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - type: DataGrid
      properties:
        role: null
        columns:
        - {id: WRGNBO, title: pos_id, data_key: id}
        - {id: XUOEWI, title: long, data_key: longitude}
        - {id: IZGFLI, title: lat, data_key: latitude}
        - {id: LSFLHY, title: '', data_key: '', width: '80'}
        auto_header: true
        tooltip: ''
        border: ''
        foreground: ''
        rows_per_page: 2
        visible: true
        wrap_on: never
        show_page_controls: true
        spacing_above: small
        spacing_below: small
        background: ''
      name: data_grid_1
      layout_properties: {grid_position: 'XEIBVG,SDYPDU'}
      components:
      - type: RepeatingPanel
        properties: {spacing_above: none, spacing_below: none, item_template: Play_ground.RowTemplate1}
        name: repeating_panel_1
        layout_properties: {}
      - type: DataRowPanel
        properties: {}
        name: data_row_panel_1
        layout_properties: {}
        components:
        - type: TextBox
          properties: {}
          name: text_box_position_id
          layout_properties: {column: WRGNBO}
        - type: TextBox
          properties: {}
          name: text_box_long
          layout_properties: {column: XUOEWI}
        - type: TextBox
          properties: {}
          name: text_box_lat
          layout_properties: {column: IZGFLI}
        - type: Button
          properties: {role: null, align: center, tooltip: '', border: '', enabled: true,
            foreground: '', visible: true, text: +, font_size: null, font: '', spacing_above: small,
            icon_align: left, spacing_below: small, italic: false, background: '',
            bold: false, underline: false, icon: ''}
          name: button_add
          layout_properties: {column: LSFLHY}
          event_bindings: {click: button_add_click}
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
    components: []
  - type: Label
    properties: {role: null, align: left, tooltip: '', border: '', foreground: '',
      visible: true, text: Browsing Coordinates, font_size: null, font: '', spacing_above: small,
      icon_align: left, spacing_below: small, italic: false, background: '', bold: false,
      underline: false, icon: ''}
    name: label_1
    layout_properties: {slot: title}
  code: "from ._anvil_designer import Play_groundTemplate\nfrom anvil import *\nimport\
    \ anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query as q\n\
    from anvil.tables import app_tables\n\nclass Play_ground(Play_groundTemplate):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    self.refresh()\n    \n    self.set_event_handler('x-refresh',\
    \ self.refresh)\n    \n    # Any code you write here will run when the form opens.\n\
    \  def refresh(self, **event_args):\n#     self.repeating_panel_1.items = anvil.server.call('get_position')\n\
    \    pass\n    \n  def button_add_click(self, **event_args):\n    \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n    anvil.server.call(\n      'insert_item',\n\
    \      self.text_box_position_id.text,\n      self.text_box_long.text,\n     \
    \ self.text_box_lat.text,\n      )\n    \n    get_open_form().raise_event('x-refresh')\n\
    \    \n    # clear input boxes\n    self.text_box_position_id.text = ''\n    self.text_box_long.text\
    \ = ''\n    self.text_box_lat.text = ''\n    \n    \n\n\nimport anvil.server\n\
    \n# anvil.server.connect(\"UJMED2IUMXXI45LLU4E3QBRG-VAXYD5Y33YOZFEN4-CLIENT\"\
    )\n\n\n# anvil.server.call('my_server_function')"
  class_name: Play_ground
  id: MMEE7OBIFWUHIVUZ3KTR7ZCGK7JV374R
- container: {type: DataRowPanel}
  components: []
  is_package: true
  code: "from ._anvil_designer import RowTemplate1Template\nfrom anvil import *\n\
    import anvil.server\nimport anvil.tables as tables\nimport anvil.tables.query\
    \ as q\nfrom anvil.tables import app_tables\n\nclass RowTemplate1(RowTemplate1Template):\n\
    \  def __init__(self, **properties):\n    # Set Form properties and Data Bindings.\n\
    \    self.init_components(**properties)\n\n    # Any code you write here will\
    \ run when the form opens."
  class_name: Play_ground.RowTemplate1
  id: 2MBY7KAH3GAVN5SW6IOY64XUA3AMDICB
startup: {type: form, module: Main_page}
package_name: Coordinates
allow_embedding: false
name: Coordinates
runtime_options: {version: 2, client_version: '3', server_version: python3-sandbox,
  server_spec: null}
metadata: {}
db_schema:
  languages:
    title: Languages
    client: full
    server: full
    columns:
    - name: language_short
      admin_ui: {width: 200}
      type: string
  sources:
    title: Sources
    client: full
    server: full
    columns:
    - name: name
      admin_ui: {width: 200}
      type: string
    - name: comment
      admin_ui: {width: 200}
      type: string
    - name: include
      admin_ui: {width: 200}
      type: bool
    - name: year
      admin_ui: {width: 200}
      type: number
dependency_order: []
dependency_code: {}
theme:
  templates:
  - name: Standard Page
    description: A page with an app bar and an optional sidebar.
    img: img/form-templates/material-design.png
    form:
      class_name: Form
      is_package: true
      container:
        type: HtmlTemplate
        properties: {html: '@theme:standard-page.html'}
      components:
      - type: ColumnPanel
        properties: {}
        name: content_panel
        layout_properties: {slot: default}
      - type: FlowPanel
        properties: {}
        name: navbar_links
        layout_properties: {slot: nav-right}
      code: "from ._anvil_designer import $NAME$Template\nfrom anvil import *\n\n\
        class $NAME$($NAME$Template):\n\n  def __init__(self, **properties):\n   \
        \ # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
        \n    # Any code you write here will run when the form opens.\n    \n"
  parameters:
    roles:
    - name: text
      components: [Label, Link]
    - name: subheading
      components: [Label]
    - name: input-prompt
      components: [Label]
    - name: headline
      components: [Label]
      displayInToolbox: true
      title: Headline
      display_in_toolbox: true
    - name: display-4
      components: [Label]
    - name: card
      components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      displayInToolbox: true
      title: Card
      display_in_toolbox: true
    - name: raised
      components: [Button, FileLoader]
    - name: primary-color
      components: [Button, FileLoader]
      title: Highlighted Button
      display_in_toolbox: true
    - name: secondary-color
      components: [Button, FileLoader]
    - name: dense
      components: [TextBox]
    - name: selected
      components: [Link]
    color_scheme:
      preset_groups:
      - name: Primary Colour
        options:
        - name: Blue
          colors:
          - {name: Primary 500, color: '#2196F3'}
          - {name: Primary 700, color: '#1976D2'}
        - name: Orange
          colors:
          - {name: Primary 500, color: '#FF9800'}
          - {name: Primary 700, color: '#F57C00'}
        - name: Red
          colors:
          - {name: Primary 500, color: '#F44336'}
          - {name: Primary 700, color: '#D32F2F'}
        - name: Pink
          colors:
          - {name: Primary 500, color: '#E91E63'}
          - {name: Primary 700, color: '#C2185B'}
        - name: Purple
          colors:
          - {name: Primary 500, color: '#9C27B0'}
          - {name: Primary 700, color: '#7B1FA2'}
        - name: Deep Purple
          colors:
          - {name: Primary 500, color: '#673AB7'}
          - {name: Primary 700, color: '#512DA8'}
        - name: Indigo
          colors:
          - {name: Primary 500, color: '#3F51B5'}
          - {name: Primary 700, color: '#303F9F'}
        - name: Light Blue
          colors:
          - {name: Primary 500, color: '#03A9F4'}
          - {name: Primary 700, color: '#0288D1'}
        - name: Cyan
          colors:
          - {name: Primary 500, color: '#00BCD4'}
          - {name: Primary 700, color: '#0097A7'}
        - name: Teal
          colors:
          - {name: Primary 500, color: '#009688'}
          - {name: Primary 700, color: '#00796B'}
        - name: Green
          colors:
          - {name: Primary 500, color: '#4CAF50'}
          - {name: Primary 700, color: '#388E3C'}
        - name: Light Green
          colors:
          - {name: Primary 500, color: '#8BC34A'}
          - {name: Primary 700, color: '#689F38'}
        - name: Lime
          colors:
          - {name: Primary 500, color: '#CDDC39'}
          - {name: Primary 700, color: '#AFB42B'}
        - name: Deep orange
          colors:
          - {name: Primary 500, color: '#FF5722'}
          - {name: Primary 700, color: '#E64A19'}
        - name: Brown
          colors:
          - {name: Primary 500, color: '#795548'}
          - {name: Primary 700, color: '#5D4037'}
        - name: Grey
          colors:
          - {name: Primary 500, color: '#9E9E9E'}
          - {name: Primary 700, color: '#616161'}
      - name: Secondary Colour
        options:
        - name: Blue
          colors:
          - {name: Secondary 500, color: '#2196F3'}
          - {name: Secondary 700, color: '#1976D2'}
        - name: Orange
          colors:
          - {name: Secondary 500, color: '#FF9800'}
          - {name: Secondary 700, color: '#F57C00'}
        - name: Red
          colors:
          - {name: Secondary 500, color: '#F44336'}
          - {name: Secondary 700, color: '#D32F2F'}
        - name: Pink
          colors:
          - {name: Secondary 500, color: '#E91E63'}
          - {name: Secondary 700, color: '#C2185B'}
        - name: Purple
          colors:
          - {name: Secondary 500, color: '#9C27B0'}
          - {name: Secondary 700, color: '#7B1FA2'}
        - name: Deep Purple
          colors:
          - {name: Secondary 500, color: '#673AB7'}
          - {name: Secondary 700, color: '#512DA8'}
        - name: Indigo
          colors:
          - {name: Secondary 500, color: '#3F51B5'}
          - {name: Secondary 700, color: '#303F9F'}
        - name: Light Blue
          colors:
          - {name: Secondary 500, color: '#03A9F4'}
          - {name: Secondary 700, color: '#0288D1'}
        - name: Cyan
          colors:
          - {name: Secondary 500, color: '#00BCD4'}
          - {name: Secondary 700, color: '#0097A7'}
        - name: Teal
          colors:
          - {name: Secondary 500, color: '#009688'}
          - {name: Secondary 700, color: '#00796B'}
        - name: Green
          colors:
          - {name: Secondary 500, color: '#4CAF50'}
          - {name: Secondary 700, color: '#388E3C'}
        - name: Light Green
          colors:
          - {name: Secondary 500, color: '#8BC34A'}
          - {name: Secondary 700, color: '#689F38'}
        - name: Lime
          colors:
          - {name: Secondary 500, color: '#CDDC39'}
          - {name: Secondary 700, color: '#AFB42B'}
        - name: Deep orange
          colors:
          - {name: Secondary 500, color: '#FF5722'}
          - {name: Secondary 700, color: '#E64A19'}
        - name: Brown
          colors:
          - {name: Secondary 500, color: '#795548'}
          - {name: Secondary 700, color: '#5D4037'}
        - name: Grey
          colors:
          - {name: Secondary 500, color: '#9E9E9E'}
          - {name: Secondary 700, color: '#616161'}
      colors:
      - {name: Primary 500, color: '#2196F3'}
      - {name: Primary 700, color: '#1976D2'}
      - {name: Secondary 500, color: '#FF9800'}
      - {name: Secondary 700, color: '#F57C00'}
      - {name: White, color: '#FFFFFF'}
      - {name: Gray 50, color: '#FAFAFA'}
      - {name: Gray 100, color: '#F5F5F5'}
      - {name: Gray 200, color: '#EEEEEE'}
      - {name: Gray 300, color: '#E0E0E0'}
      - {name: Gray 600, color: '#757575'}
      - {name: Gray 800, color: '#424242'}
      - {name: Gray 900, color: '#212121'}
      - {name: Black, color: '#000000'}
  assets:
  - {name: standard-page.html, content: PGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bzozMDAsNDAwLDUwMCIgcmVsPSJzdHlsZXNoZWV0IiByZWw9InByZWxvYWQiIGFzPSJmb250IiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj4KCjxkaXYgY2xhc3M9InN0cnVjdHVyZSI+CiAgPGRpdiBjbGFzcz0iYXBwLWJhciIgYW52aWwtZHJvcC1jb250YWluZXI9Ii5hbnZpbC1jb250YWluZXIiIGFudmlsLWRyb3AtcmVkaXJlY3Q9Ii5wbGFjZWhvbGRlciI+CiAgICA8YSBjbGFzcz0ic2lkZWJhci10b2dnbGUiIGFudmlsLWlmLXNsb3QtZW1wdHk9InRvcC1sZWZ0LWJ0biIgYW52aWwtaGlkZS1pZi1zbG90LWVtcHR5PSJsZWZ0LW5hdiIgYW52aWwtZHJvcC1zbG90PSJ0b3AtbGVmdC1idG4iIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+PGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT48L2E+CiAgICA8YSBjbGFzcz0ic2lkZWJhci10b2dnbGUgYW52aWwtZGVzaWduZXItb25seSIgYW52aWwtaWYtc2xvdC1lbXB0eT0idG9wLWxlZnQtYnRuIiBhbnZpbC1pZi1zbG90LWVtcHR5PSJsZWZ0LW5hdiIgYW52aWwtZHJvcC1zbG90PSJ0b3AtbGVmdC1idG4iPjxpIGNsYXNzPSJmYSBmYS1ibGFuayI+PC9pPjwvYT4KICAgIDxkaXYgY2xhc3M9InRvcC1sZWZ0LWJ0biIgYW52aWwtc2xvdD0idG9wLWxlZnQtYnRuIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InRpdGxlIiBhbnZpbC1zbG90PSJ0aXRsZSI+CiAgICAgIDxkaXYgY2xhc3M9InBsYWNlaG9sZGVyIGFudmlsLWRlc2lnbmVyLW9ubHkiIGFudmlsLWlmLXNsb3QtZW1wdHk9InRpdGxlIiBhbnZpbC1kcm9wLWhlcmU+RHJvcCB0aXRsZSBoZXJlPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImFwcC1iYXItbmF2IiBhbnZpbC1zbG90PSJuYXYtcmlnaHQiPgogICAgICA8ZGl2IGNsYXNzPSJwbGFjZWhvbGRlciBhbnZpbC1kZXNpZ25lci1vbmx5IiBhbnZpbC1pZi1zbG90LWVtcHR5PSJuYXYtcmlnaHQiIGFudmlsLWRyb3AtaGVyZT5Ecm9wIGEgRmxvd1BhbmVsIGhlcmU8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBzdHlsZT0iY2xlYXI6Ym90aCI+PC9kaXY+CiAgPC9kaXY+CgogIDxkaXYgY2xhc3M9Im5hdi1ob2xkZXIiPgogICAgPGRpdiBjbGFzcz0ibGVmdC1uYXYgYW52aWwtbWVhc3VyZS10aGlzIiBhbnZpbC1zbG90LXJlcGVhdD0ibGVmdC1uYXYiIGFudmlsLWRyb3AtY29udGFpbmVyPSI+LmFudmlsLWNvbnRhaW5lciI+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImxlZnQtbmF2LXBsYWNlaG9sZGVyIGFudmlsLWRlc2lnbmVyLW9ubHkiIGFudmlsLWlmLXNsb3QtZW1wdHk9ImxlZnQtbmF2IiBhbnZpbC1kcm9wLXNsb3Q9ImxlZnQtbmF2Ij4KICAgICAgPGRpdiBjbGFzcz0icHJvbXB0Ij5UbyBhZGQgYSBzaWRlYmFyLCBkcm9wIGEgQ29sdW1uUGFuZWwgaGVyZS48L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICA8ZGl2IGFudmlsLXNsb3QtcmVwZWF0PSJkZWZhdWx0IiBjbGFzcz0iYW52aWwtbWVhc3VyZS10aGlzIj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0icGxhY2Vob2xkZXIgZHJvcC1oZXJlIiBhbnZpbC1pZi1zbG90LWVtcHR5PSJkZWZhdWx0IiBhbnZpbC1kcm9wLXNsb3Q9ImRlZmF1bHQiPkRyb3AgYSBDb2x1bW5QYW5lbCBoZXJlLjwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ibmF2LXNoaWVsZCI+PC9kaXY+CjwvZGl2Pgo8ZGl2IGFudmlsLWRyb3AtZGVmYXVsdCBhbnZpbC1kcm9wLXJlZGlyZWN0PSIucGxhY2Vob2xkZXIiIGFudmlsLWRyb3AtY29udGFpbmVyPSIuYW52aWwtY29udGFpbmVyIj48L2Rpdj4KIAo8c2NyaXB0PgogIGZ1bmN0aW9uIGhpZGVTaWRlYmFyKCkgewogICAgdmFyIGxuID0gJCgnLnN0cnVjdHVyZSA+IC5uYXYtaG9sZGVyID4gLmxlZnQtbmF2Jyk7CiAgICBsbi5hbmltYXRlKHtsZWZ0OiAtbG4ub3V0ZXJXaWR0aCgpfSwgZnVuY3Rpb24oKSB7CiAgICAgIGxuLnJlbW92ZUNsYXNzKCJpbi10cmFuc2l0aW9uIHNob3duIikuYWRkQ2xhc3MoImhpZGRlbiIpOwogICAgICAkKCcubmF2LXNoaWVsZCcpLnJlbW92ZUNsYXNzKCJzaG93biIpOwogICAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7CiAgICB9KTsKICB9CiAgZnVuY3Rpb24gc2hvd1NpZGViYXIoKSB7CiAgICB2YXIgbG4gPSAkKCcuc3RydWN0dXJlID4gLm5hdi1ob2xkZXIgPiAubGVmdC1uYXYnKTsKICAgICQoJy5uYXYtc2hpZWxkJykuYWRkQ2xhc3MoInNob3duIik7CiAgICBsbi5hZGRDbGFzcygic2hvd24iKS5yZW1vdmVDbGFzcygiaGlkZGVuIikuY3NzKHtsZWZ0OiAiLTEwMCUifSkuY3NzKHtsZWZ0OiAtbG4ub3V0ZXJXaWR0aCgpfSkuYW5pbWF0ZSh7bGVmdDogMH0sIGZ1bmN0aW9uKCkgewogICAgICBsbi5yZW1vdmVDbGFzcygiaW4tdHJhbnNpdGlvbiIpOwogICAgfSk7CiAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7CiAgfQogICQoJy5zaWRlYmFyLXRvZ2dsZSwgLm5hdi1zaGllbGQnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICB2YXIgbG4gPSAkKCcuc3RydWN0dXJlID4gLm5hdi1ob2xkZXIgPiAubGVmdC1uYXYnKTsKICAgIGlmIChsbi5pcygiOnZpc2libGUiKSB8fCAkKCcubmF2LXNoaWVsZCcpLmlzKCIuc2hvd24iKSkgewogICAgICBoaWRlU2lkZWJhcigpOwogICAgfSBlbHNlIGlmKCFsbi5pcygiOmVtcHR5IikpIHsKICAgICAgc2hvd1NpZGViYXIoKTsKICAgIH0KICB9KTsKICAkKCcubGVmdC1uYXYnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJ2EsIGJ1dHRvbicsIGZ1bmN0aW9uKCkgewogICAgaWYgKCQoJy5uYXYtc2hpZWxkJykuaXMoIjp2aXNpYmxlIikpIHsKICAgICAgJCgnLm5hdi1zaGllbGQnKS50cmlnZ2VyKCdjbGljaycpOwogICAgfQogIH0pOwo8L3NjcmlwdD4=,
    id: KZPXZKBW4SKEGTMN4OPVIOWJG6JGZOSB}
  - {name: theme.css, content: ,
    id: 5E4Y7NEJTG3YVA55OX4UQVCYMKLHZ7RS}
server_modules: []
renamed: true
